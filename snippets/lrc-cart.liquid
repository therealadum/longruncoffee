<div id="lrc-cart"></div>

<script
  type="text/babel"
>
    (async () => {
        while (typeof klaviyo === 'undefined') {
            console.log('waiting for klaviyo');
            await new Promise((resolve) => setTimeout(resolve, 1000));
        }
        klaviyo.identify({}).then((d) => console.log(d));
    })();

  recharge.init({
    storeIdentifier: 'longruncoffee.myshopify.com',
    storefrontAccessToken: 'strfnt_554c548c9ee33e7dfb04ba981797a8e49a71423f554234f212fbc4de1cb26d63',
  });

  const referenceString = 'v2-subscription-items';

  function isRechargeAvailableOnProduct(product) {
    let available = false;
    for (let i = 0; i < product.selling_plan_groups.length; i++) {
      if (product.selling_plan_groups[i].app_id === "294517") {
        available = true;
      }
    }
    return available;
  }

  const plans = {
    base: {
      display_name: "base",
      bag_min: 2,
      perk_list: ['10% savings', 'Free shipping', 'Experimental samples'],
      discount: 0.10,
      type: 'base'
    },
    pro: {
      display_name: "Pro",
      bag_min: 3,
      perk_list: ['20% savings', 'Free shipping', 'Experimental samples', 'Free Yeti Tumbler'],
      discount: 0.2,
      type: 'pro'
    },
    elite: {
      display_name: "Elite",
      bag_min: 4, // or 5 pound bag
      perk_list: ['25% savings', 'Free shipping', 'Experimental samples', 'Free Yeti Tumbler', 'Free BOCO hat'],
      discount: 0.25,
      type: 'elite'
    }
  };

  function checkoutStatus(cartState, cart, plan) {
    if (cartState.items.length && !plan) {
        return 'SUBSCRIBE_AND_SAVE_MINIMUM_BAG_COUNT';
    } else if (cartState.items.length && plan) {
        return 'OKAY';
    } else if (cart.items.length) {
        let onlyContainsGifts = true;
        cart.items.forEach(item => {
            if (item.product_type !== 'Gift') {
                onlyContainsGifts = false;
            }
        })
        if (!onlyContainsGifts) {
            return 'OKAY';
        } else {
            return 'ONLY_CONTAINS_GIFTS';
        }
    } else {
        return 'NOTHING_TO_CHECKOUT';
    }
  }

  async function getCart() {
    try {
        const response = await fetch(window.Shopify.routes.root + 'cart.js');
        const parsed = await response.json();
        return parsed;
    } catch (e) {
        console.error(e);
        return null;
    }
  }

  function getAdditionalSubscriptionDiscount(totalSubscriptionItems) {
    let discount = 0;
    if (totalSubscriptionItems >= plans.elite.bag_min - 1) {
        discount = plans.elite.discount;
    } else if (totalSubscriptionItems >= plans.pro.bag_min - 1) {
        discount = plans.pro.discount;
    } else if (totalSubscriptionItems >= plans.base.bag_min - 1) {
        discount = plans.base.discount;
    }
    return discount;
  }

  function getNextPlanFromCartState(totalSubscriptionItems) {
    let plan = plans.base;
    if (totalSubscriptionItems >= plans.pro.bag_min) {
        plan = plans.elite
    } else if (totalSubscriptionItems >= plans.base.bag_min) {
        plan = plans.pro;
    }
    return plan;
  }

  function getPlanFromCartState(totalSubscriptionItems) {
    let plan = null;
    if (totalSubscriptionItems >= plans.elite.bag_min) {
        plan = plans.elite
    } else if (totalSubscriptionItems >= plans.pro.bag_min) {
        plan = plans.pro;
    } else if (totalSubscriptionItems >= plans.base.bag_min) {
        plan = plans.base;
    }
    return plan;
  }

  function isCartOnlyGiftItems(items, subscriptionItems) {
    if (subscriptionItems > 0) {
        return false;
    }
    let foundNonGiftItem = false;
    items.forEach(item => {
        if (item.product_type !== "Gift") {
            foundNonGiftItem = true;
        }
    });
    return !foundNonGiftItem;
  }

  function cartContainsGiftItems(items, totalSubscriptionItems) {
    let found = false;
    items.forEach(item => {
        if (item.product_type === 'Gift') {
            found = true;
        }
    })
    return found || totalSubscriptionItems > 0;
  }

  function diffPlans(plan, nextPlan) {
    const unique = [];
    if (!plan) {
        return nextPlan.perk_list;
    }
    for (let i = 0; i < nextPlan.perk_list.length; i++) {
        if (plan.perk_list.indexOf(nextPlan.perk_list[i]) === -1) {
            unique.push(nextPlan.perk_list[i])
        }
    }
    return unique;
  }

  function SubscriptionItem({index, item, cartState, setCartState}) {
    const [state, setState] = React.useState({
        isEditing: false,
        editQuantity: item.quantity,
        loading: false
    });

    React.useEffect(() => {
        if (item.quantity !== state.editQuantity && state.isEditing === false) {
            setState({
                ...state,
                editQuantity: item.quantity
            });
        }
    }, [item.quantity, setState, state.editQuantity]);

    const onClick = React.useCallback(() => {
        if (state.isEditing) {
            setState({
                ...state,
                loading: true
            })
            const newItems = [...cartState.items];
            let index = null;
            for (let i = 0; i < newItems.length; i++) {
                if (newItems[i].variantID === item.variantID) {
                    index = i;
                }
            }
            if (index === null) {
                console.error("could not remove item.");
                return;
            }
            if (state.editQuantity === 0) {
                newItems.splice(index, 1)
            } else {
                newItems[index].quantity = state.editQuantity;
            }
            setState({
                ...state,
                loading: false,
                isEditing: false
            });
            setCartState({
                ...cartState,
                items: newItems
            });
        } else {
            setState({
                ...state,
                isEditing: true
            })
        }
    }, [setState, setCartState, cartState, state, item])

    return <div
        className="flex flex-col space-y-2 group relative"
      >
        <div className="absolute top-2 left-0 right-0 flex items-stretch space-x-2">
            {
                state.isEditing ? <div className="flex-1 shadow-md z-10 rounded-full bg-neutral-50 flex items-center justify-center p-1">
                    <button onClick={() => {
                        if (state.editQuantity > 0) {
                            setState({
                                ...state,
                                editQuantity: state.editQuantity - 1
                            })
                        }
                    }} className="px-2 flex items-center justify-center text-base">
                        <span>-</span>
                    </button>
                    <span className="flex-1 text-cyan-700 text-base text-center">{state.editQuantity}</span>
                    <button onClick={() => setState({
                            ...state,
                            editQuantity: state.editQuantity + 1
                        })} className="px-2 flex items-center justify-center text-base">
                        <span>+</span>
                    </button>
                </div>: null
            }
            <button disabled={state.loading} onClick={onClick} className={`ml-auto shadow-md z-10 rounded-full h-8 w-8 bg-neutral-50 flex items-center justify-center ${state.loading ? 'cursor-not-allowed' : ''}`}>
                {
                    state.isEditing ? state.loading ? <svg className="animate-spin h-4 w-4 text-cyan-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" />
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z" />
                      </svg> : <svg
                        xmlns="http://www.w3.org/2000/svg"
                        viewBox="0 0 24 24"
                        fill="currentColor"
                        className="w-4 h-4 text-cyan-400"
                    >
                        <path fillRule="evenodd" d="M19.916 4.626a.75.75 0 01.208 1.04l-9 13.5a.75.75 0 01-1.154.114l-6-6a.75.75 0 011.06-1.06l5.353 5.353 8.493-12.739a.75.75 0 011.04-.208z" clipRule="evenodd" />
                    </svg> : <span className="flex items-end self-center"><span className="text-sm">{state.editQuantity}</span><span className="text-xs">x</span></span>
                }
            </button>
        </div>
        <img
            src={`${item.product.featured_image}&width=150`}
            loading="lazy"
            className="w-full h-32 object-contain cursor-pointer"
            onClick={onClick}
        />
        <h6 className="font-base text-xs text-cyan-800 text-center">
            {item.variant.option1}, {item.variant.option2}
        </h6>
        <h5 className="font-base text-sm text-cyan-800 font-[700] text-center leading-[16px] tracking-tight">
            <a href={item.product.url}>{item.product.title}</a>
        </h5>
    </div>
  }

  function UpsellItem({item, setCart}) {
    const [loading, setLoading] = React.useState(false);
    
    const onClick = React.useCallback(() => {
        setLoading(true);
        fetch(window.Shopify.routes.root + 'cart/add.js', {
            method: 'POST',
            headers: {
            'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                items: [{
                    'id': item.variants[0].id,
                    quantity: 1
                }]
            })
        })
        .then(async response => {
            const newCart = await getCart();
            setLoading(false);
            setCart(newCart);
        })
        .catch((error) => {
            setLoading(false);
            console.error('Error:', error);
        });
    }, [setLoading, setCart, item]);

    return <div
        className="flex flex-col space-y-2 group relative"
      >
        <button onClick={onClick} className={`absolute right-0 top-2 shadow-md z-10 rounded-full h-8 w-8 bg-neutral-50 flex items-center justify-center ${loading ? 'cursor-not-allowed' : ''}`}>
            { loading ? <svg className="animate-spin h-4 w-4 text-cyan-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" />
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z" />
                 </svg> : <svg
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 24 24"
                    fill="currentColor"
                    className="w-4 h-4 text-cyan-400"
                >
                    <path fillRule="evenodd" d="M12 3.75a.75.75 0 01.75.75v6.75h6.75a.75.75 0 010 1.5h-6.75v6.75a.75.75 0 01-1.5 0v-6.75H4.5a.75.75 0 010-1.5h6.75V4.5a.75.75 0 01.75-.75z" clipRule="evenodd" />
                </svg>
            }
        </button>
        <img
          src={`${item.images[0].src}&width=150`}
          loading="lazy"
          onClick={onClick}
          className="w-full h-32 object-contain cursor-pointer"
        />
        <h6 className="font-base text-xs text-cyan-800 text-center">
          + ${item.variants[0].price}
        </h6>
        <h5 className="font-base text-sm text-cyan-800 font-[700] text-center leading-[16px] tracking-tight">
          <a href={`/products/${item.handle}`}>{item.title}</a>
        </h5>
      </div>
  }

  function CartItem({item, setCart}) {
    const [cartQuantityState, setCartQuantityState] = React.useState({
        isEditing: false,
        editQuantity: item.quantity,
        loading: false
    });

    React.useEffect(() => {
        if (item.quantity !== cartQuantityState.editQuantity && cartQuantityState.isEditing === false) {
            setCartQuantityState({
                ...cartQuantityState,
                editQuantity: item.quantity
            });
        }
    }, [item.quantity, setCartQuantityState, cartQuantityState.editQuantity]);

    const onClick = React.useCallback(() => {
        if (cartQuantityState.isEditing) {
            setCartQuantityState({
                ...cartQuantityState,
                loading: true
            })
            const vo = {};
            vo[item.variant_id] = cartQuantityState.editQuantity;
            fetch(window.Shopify.routes.root + 'cart/update.js', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    updates: vo
                })
            })
            .then(async response => {
                const newCart = await getCart();
                setCartQuantityState({
                    ...cartQuantityState,
                    loading: false,
                    isEditing: false
                });
                setCart(newCart);
            })
            .catch((error) => {
                console.error('Error:', error);
            });
        } else {
            setCartQuantityState({
                ...cartQuantityState,
                isEditing: true
            })
        }
    }, [cartQuantityState, setCartQuantityState, setCart])

    return <div
            key={item.id}
            className="flex flex-col space-y-2 group relative"
        >
            {item.product_type != "Gift" ? 
                <div className="absolute top-2 left-0 right-0 flex items-stretch space-x-2">
                    {
                        cartQuantityState.isEditing ? <div className="flex-1 shadow-md z-10 rounded-full bg-neutral-50 flex items-center justify-center p-1">
                            <button onClick={() => {
                                if (cartQuantityState.editQuantity > 0) {
                                    setCartQuantityState({
                                        ...cartQuantityState,
                                        editQuantity: cartQuantityState.editQuantity - 1
                                    })
                                }
                            }} className="px-2 flex items-center justify-center text-base">
                                <span>-</span>
                            </button>
                            <span className="flex-1 text-cyan-700 text-base text-center">{cartQuantityState.editQuantity}</span>
                            <button onClick={() => setCartQuantityState({
                                    ...cartQuantityState,
                                    editQuantity: cartQuantityState.editQuantity + 1
                                })} className="px-2 flex items-center justify-center text-base">
                                <span>+</span>
                            </button>
                        </div>: null
                    }
                    <button disabled={cartQuantityState.loading} onClick={onClick} className={`ml-auto shadow-md z-10 rounded-full h-8 w-8 bg-neutral-50 flex items-center justify-center ${cartQuantityState.loading ? 'cursor-not-allowed' : ''}`}>
                        {
                            cartQuantityState.isEditing ? cartQuantityState.loading ? <svg className="animate-spin h-4 w-4 text-cyan-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" />
                                <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z" />
                              </svg> : <svg
                                xmlns="http://www.w3.org/2000/svg"
                                viewBox="0 0 24 24"
                                fill="currentColor"
                                className="w-4 h-4 text-cyan-400"
                            >
                                <path fillRule="evenodd" d="M19.916 4.626a.75.75 0 01.208 1.04l-9 13.5a.75.75 0 01-1.154.114l-6-6a.75.75 0 011.06-1.06l5.353 5.353 8.493-12.739a.75.75 0 011.04-.208z" clipRule="evenodd" />
                            </svg> : <span className="flex items-end self-center"><span className="text-sm">{cartQuantityState.editQuantity}</span><span className="text-xs">x</span></span>
                        }
                    </button>
                </div>
            : null}
            <img
                src={`${item.featured_image.url}&width=150`}
                loading="lazy"
                className="w-full h-32 object-contain cursor-pointer"
                onClick={onClick}
            />
            {
                item.variant_options.filter(opt => opt !== "Default Title").length > 0 ? <h6 className="font-base text-xs text-cyan-800 text-center">
                    {item.variant_options.join(', ')}
                </h6> : null
            }
            <h5 className="font-base text-sm text-cyan-800 font-[700] text-center leading-[16px] tracking-tight">
                <a href={item.url}>{item.product_title}</a>
            </h5>
    </div>
  }

  function BonusItem({title, href, image, header, quantity}) {
    return <div
        className="flex flex-col space-y-2 group relative"
    >
        {
            quantity ? <div className="absolute top-2 left-0 right-0 flex items-stretch space-x-2">
                <div className="ml-auto shadow-md z-10 rounded-full h-8 w-8 bg-neutral-50 flex items-center justify-center">
                    <span className="flex items-end self-center"><span className="text-sm">{quantity}</span><span className="text-xs">x</span></span>
                </div>
            </div> : null
        }
        <img
            src={image}
            loading="lazy"
            className="w-full h-32 object-contain cursor-pointer"
        />
        {
            header ? <h6 className="font-base text-xs text-cyan-800 text-center">
                {header}
            </h6> : null
        }
        <h5 className="font-base text-sm text-cyan-800 font-[700] text-center leading-[16px] tracking-tight">
            <a href={href}>{title}</a>
        </h5>
    </div>
  }

  function getTotalSubscriptionItemsFromCartState(cartState) {
    let total = 0;
    for (let i = 0; i < cartState.items.length; i++) {
        total += cartState.items[i].quantity;
    }
    return total;
  }
  
  function LRCCart() {
    const [cartState, innerSetCartState] = React.useState(localStorage.getItem(referenceString) ? JSON.parse(localStorage.getItem(referenceString)) : {
      items: [],
    });
    const [isOpen, setIsOpen] = React.useState(false);
    const [cart, setCart] = React.useState({{ cart | json }});
    const [loadingUpgrade, setLoadingUpgrade] = React.useState(false);
    const [loadingCheckout, setLoadingCheckout] = React.useState(false);
    const totalSubscriptionItems = getTotalSubscriptionItemsFromCartState(cartState);

    console.log(cart)

    const [upsellItems, setUpsellItems] = React.useState([]);
    React.useEffect(() => {
        let mounted = true;
        const handler = async () => {
            const response = await fetch('/collections/cart-upsell/products.json');
            const parsed = await response.json();
            if (mounted) {
                setUpsellItems(parsed.products);
            }
        };
        handler();
        return () => {
            mounted = false;
        }
    }, [setUpsellItems]);
    
    const setCartState = React.useCallback((newCartState) => {
        const s = { ...newCartState };
        delete s.cart;
        localStorage.setItem(referenceString, JSON.stringify(newCartState))
        innerSetCartState(newCartState)
    }, [cartState]);

    React.useEffect(() => {
        const handler = () => setIsOpen(!isOpen);
        document.addEventListener('cart_toggle', handler);
        return () => {
            document.removeEventListener('cart_toggle', handler);
        }
    }, [isOpen, setIsOpen]);

    // listen to subscription additions / removals
    // if any subscribables, add bonus coffee to cart
    /* React.useEffect(() => {
        let foundBonusCoffee = false;
        cart.items.forEach(item => {
            if (item.id === 48244318142777) {
                foundBonusCoffee = true;
            }
        })
        let subscriptionItemsInCart = false;
        cart.items.forEach(item => {
            if (item.selling_plan_allocation && item.selling_plan_allocation.selling_plan) {
                subscriptionItemsInCart = true;
            }
        })
        if (totalSubscriptionItems > 0 || subscriptionItemsInCart) {
            // check if bonus coffee is in cart
            // if not, add it
            if (!foundBonusCoffee) {
                fetch(window.Shopify.routes.root + 'cart/update.js', {
                    method: 'POST',
                    headers: {
                    'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        updates: {
                            '48244318142777': 1
                        }
                    })
                }).then(async () => {
                    const newCart = await getCart();
                    setCart(newCart);
                })
            }
        } else if (!subscriptionItemsInCart) {
            if (foundBonusCoffee) {
                fetch(window.Shopify.routes.root + 'cart/update.js', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        updates: {
                            '48244318142777': 0
                        }
                    })
                }).then(async () => {
                    const newCart = await getCart();
                    setCart(newCart);
                })
            }
        }
    }, [totalSubscriptionItems, setCart, cart]) */

    React.useEffect(() => {
        const handler = async function(event) {
            const { variantId, isSubscription, quantity, available } = event.detail
            const url = window.location.href.split('/')
            const product_hash = url[url.length - 1]

            if (isSubscription) {
                if (variantId && product_hash) {
                    const data = await fetch(window.Shopify.routes.root + `products/${product_hash}.js`);
                    const product = await data.json();

                    let variant;
                    for (let j = 0; j < product.variants.length; j++) {
                        if (product.variants[j].id == variantId) {
                            variant = product.variants[j];
                        }
                    }
                    const item = {
                        product,
                        variantID: variantId,
                        variant,
                        quantity: 1
                    }

                    if (await klaviyo.isIdentified()) {
                        // report to klayvio
                        klaviyo.push(['track', 'add_subscription_item_to_cart', {
                            'product_id' : product.id,
                            'variant_id': variantId
                        }]);
                    }

                    // if already in subscriptions, add quantity - otherwise add new item
                    let existingItemIndex = null;
                    for (let j = 0; j < cartState.items.length; j++) {
                        if (cartState.items[j].variantID === item.variantID) {
                            existingItemIndex = j;
                        }
                    }
                    if (existingItemIndex !== null) {
                        const newItems = [...cartState.items];
                        newItems[existingItemIndex].quantity += 1;
                        setCartState({
                            ...cartState,
                            items: newItems
                        })
                    } else {
                        setCartState({
                            ...cartState,
                            items: [...cartState.items, {
                                ...item,
                                quantity: 1
                            }]
                        })
                    }
                    setIsOpen(true);
                    document.dispatchEvent(new CustomEvent('buy_button_complete'))
                } else {
                    console.log('not found.');
                    document.dispatchEvent(new CustomEvent('buy_button_complete'));
                }
            } else if (available) {
                fetch(window.Shopify.routes.root + 'cart/add.js', {
                    method: 'POST',
                    headers: {
                    'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        items: [{
                            'id': variantId,
                            quantity
                        }]
                    })
                })
                .then(async response => {
                    const newCart = await getCart();
                    setCart(newCart);
                    setIsOpen(true);
                    document.dispatchEvent(new CustomEvent('buy_button_complete'));
                })
                .catch((error) => {
                    console.error('Error:', error);
                    document.dispatchEvent(new CustomEvent('buy_button_complete'));
                });
            }
        };
        document.addEventListener('buy_button', handler);
        return () => {
          document.removeEventListener('buy_button', handler)
        }
    }, [setCartState, setIsOpen, setCart]);

    const plan = React.useMemo(() => getPlanFromCartState(totalSubscriptionItems), [totalSubscriptionItems]);
    const nextPlan = React.useMemo(() => getNextPlanFromCartState(totalSubscriptionItems), [totalSubscriptionItems]);
    const nextPerks = React.useMemo(() => diffPlans(plan, nextPlan), [plan, nextPlan]);

    // map from product handle to if it is subscribable or not
    const [cartProductSubscribable, setCartProductSubscribable] = React.useState({});

    React.useEffect(() => {
        const newCartProductSubscribable = {...cartProductSubscribable};
        let needsRefresh = false;
        for (let i = 0; i < cart.items.length; i++) {
            if (!cartProductSubscribable.hasOwnProperty(`${cart.items[i].handle}__${cart.items[i].variant_id}`)) {
                newCartProductSubscribable[`${cart.items[i].handle}__${cart.items[i].variant_id}`] = undefined;
                needsRefresh = true;
            }
        }
        if (needsRefresh) {
            const keys = Object.keys(newCartProductSubscribable);
            const promises = [];
            for (let i = 0; i < keys.length; i++) {
                if (!cartProductSubscribable.hasOwnProperty(keys[i])) {
                    // get product info
                    promises.push(new Promise(async (resolve, reject) => {
                        const response = await fetch(window.Shopify.routes.root + `products/${keys[i].split('__')[0]}.js`);
                        const parsed = await response.json();
                        const variant = parsed.variants.find(v => v.id == keys[i].split('__')[1]);
                        const cartItem = cart.items.find(ci => ci.variant_id == keys[i].split('__')[1]);
                        resolve({
                            product: parsed,
                            variantID: Number(keys[i].split('__')[1]),
                            variant,
                            variant_title: `${variant.option1}, ${variant.option2}`,
                            quantity: cartItem.quantity
                        });
                    }));
                }
            }
            const handler = async () => {
                const r = await Promise.all(promises);
                for (let i = 0; i < r.length; i++) {
                    if (isRechargeAvailableOnProduct(r[i].product)) {
                        newCartProductSubscribable[`${r[i].product.handle}__${r[i].variantID}`] = r[i];
                    } else {
                        newCartProductSubscribable[r[i].handle] = false
                    }
                }
                setCartProductSubscribable(newCartProductSubscribable)
            }
            handler();
        }
    }, [cart.items_subtotal_price, cartProductSubscribable, setCartProductSubscribable]);

    const cartItemsThatCanBeSubscribedTo = React.useMemo(() => {
        let items = 0;
        for (let i = 0; i < cart.items.length; i++) {
            if (cartProductSubscribable[`${cart.items[i].handle}__${cart.items[i].variant_id}`]) {
                items += cart.items[i].quantity
            }
        }
        return items;
    }, [cartProductSubscribable, cart.items]);

    const potentialSavings = React.useMemo(() => {
        let total = 0;
        const p = getPlanFromCartState(cartItemsThatCanBeSubscribedTo + totalSubscriptionItems);
        for (let i = 0; i < cart.items.length; i++) {
            if (cartProductSubscribable[`${cart.items[i].handle}__${cart.items[i].variant_id}`]) {
                total += cart.items[i].line_price * (p ? p.discount : 0.1)
            }
        }
        return total
    }, [cartItemsThatCanBeSubscribedTo, cart.items, cartState, totalSubscriptionItems, cartProductSubscribable])

    const cartSubtotal = React.useMemo(() => {
        let total = cart.items_subtotal_price;
        for (let i = 0; i < cartState.items.length; i++) {
            total += cartState.items[i].variant.price * cartState.items[i].quantity;
        }
        return total;
    }, [cart.items_subtotal_price, totalSubscriptionItems]);

    React.useEffect(() => {
        let count = 0;
        cartState.items.forEach(item => {
            count += item.quantity;
        });
        cart.items.forEach(item => {
            if (item.product_type !== "Gift") {
                count += item.quantity;
            }
        });

        const amountUntilFreeShipping = totalSubscriptionItems > 1 ? 0 : 5900 - cartSubtotal;
        document.dispatchEvent(new CustomEvent('cart_count_change', { detail: { count, amountUntilFreeShipping } }));

        let itemCount = 0;
        for (let i = 0; i < cartState.items.length; i++) {
            itemCount += cartState.items[i].quantity;
        }
        const p = getNextPlanFromCartState(itemCount);
        document.dispatchEvent(new CustomEvent('subscription_changed', { detail: { newDiscount: p.discount, nextPlan: p } }))
    }, [cartSubtotal, cartState, totalSubscriptionItems, cartSubtotal]);

    const cartSubtotalWithDiscounts = React.useMemo(() => {
        let total = cart.items_subtotal_price;
        for (let i = 0; i < cartState.items.length; i++) {
            total += cartState.items[i].variant.price * cartState.items[i].quantity * (1 - (plan ? plan.discount : 0));
        }
        return total;
    }, [cart.items_subtotal_price, totalSubscriptionItems, plan]);

    const shippingStyle = {width: `${totalSubscriptionItems > 1 ? 100 : Math.round(cartSubtotal*100/5900)}%`};

    // sync cart.items that are subscriptions to cartState.items when loadingCheckout is false
    React.useEffect(() => {
        if (!loadingCheckout) {
            if (cartState.items.length == 0) {
                // just came back from checkout
                const newCartItems = [...cartState.items];
                const cartItemsWithSellingPlans = cart.items.filter(ca => ca.selling_plan_allocation)
                if (cartItemsWithSellingPlans.length) {
                    const promises = cartItemsWithSellingPlans.map(ca => new Promise(async (resolve, reject) => {
                        const response = await fetch(window.Shopify.routes.root + `products/${ca.handle}.js`);
                        const product = await response.json();
                        let variant;
                        for (let j = 0; j < product.variants.length; j++) {
                            if (product.variants[j].id == ca.variant_id) {
                                variant = product.variants[j];
                            }
                        }
                        const item = {
                            product,
                            variantID: ca.variant_id,
                            variant,
                            quantity: ca.quantity
                        }
                        // if already in subscriptions, add quantity - otherwise add new item
                        let existingItemIndex = null;
                        for (let j = 0; j < newCartItems.length; j++) {
                            if (newCartItems[j].variantID === item.variantID) {
                                existingItemIndex = j;
                            }
                        }
                        if (existingItemIndex !== null) {
                            newCartItems[existingItemIndex].quantity += item.quantity;
                        } else {
                            newCartItems.push(item)
                        }
                        resolve();
                    }));
                    promises.push(new Promise(async (resolve, reject) => {
                        const vo = {};
                        cartItemsWithSellingPlans.forEach(ca => {
                            vo[ca.variant_id] = 0;
                        });
                        await fetch(window.Shopify.routes.root + 'cart/update.js', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                updates: vo
                            })
                        });
                        const newCart = await getCart();
                        setCart(newCart);
                        resolve();
                    }))
                    const handler = async () => {
                        await Promise.all(promises);
                        setCartState({
                            ...cartState,
                            items: newCartItems
                        })
                    }
                    handler();
                }
            } else {
                // clean up any remenants in cart
                const cartItemsWithSellingPlans = cart.items.filter(ca => ca.selling_plan_allocation);
                const promises = [];
                promises.push(new Promise(async (resolve, reject) => {
                    const vo = {};
                    cartItemsWithSellingPlans.forEach(ca => {
                        vo[ca.variant_id] = 0;
                    });
                    await fetch(window.Shopify.routes.root + 'cart/update.js', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            updates: vo
                        })
                    });
                    const newCart = await getCart();
                    setCart(newCart);
                    resolve();
                }))
                const handler = async () => {
                    await Promise.all(promises);
                }
                handler();
            }
        }
    }, [loadingCheckout])

    const checkout = async () => {
        if (!cart.items.length && !cartState.items.length) {
            return;
        }

        // prevent checkout if user has only one item in subscription
        if (cartState.items.length && !plan) {
            return;
        }

        setLoadingCheckout(true);

        if (cartState.items.length) {
            // calculate tier based on items
            let bundleVariantId = null;
            if (plan.display_name.toLowerCase() === 'base') {
                bundleVariantId = '47884295078201';
            } else if (plan.display_name.toLowerCase() === 'pro') {
                bundleVariantId = '47884295110969';
            } else if (plan.display_name.toLowerCase() === 'elite') {
                bundleVariantId = '47884295143737';
            } else {
                console.error("subscription plan not found")
            }

            // pluck selling plan from items[0].product.selling_plan_groups[name === 'Base'].selling_plans[0].options[0].value
            let bundleSellingPlan = null;
            for (let i = 0; i < cartState.items[0].product.selling_plan_groups.length; i++) {
                if (cartState.items[0].product.selling_plan_groups[i].name.toLowerCase() === plan.display_name.toLowerCase()) {
                    bundleSellingPlan = cartState.items[0].product.selling_plan_groups[i].options[0].values[0]
                }
            }

            // iterate through items and add to selection array with sellingPlan = items[0].product.selling_plan_groups[name === 'Base'].selling_plans[0].id
            // instead of pushing duplicates add to single selection
            const selectionMap = {};
            for (let i = 0; i < cartState.items.length; i++) {
                const item = cartState.items[i];
                if (selectionMap[`${item.product.id}-${item.variant.id}`]) {
                    selectionMap[`${item.product.id}-${item.variant.id}`].quantity += item.quantity;
                } else {
                    let sellingPlan = null;
                    for (let j = 0; j < item.product.selling_plan_groups.length; j++) {
                        if (item.product.selling_plan_groups[j].name.toLowerCase() === plan.display_name.toLowerCase()) {
                            sellingPlan = item.product.selling_plan_groups[j].selling_plans[0].id;
                        }
                    }
                    if (!sellingPlan) {
                        return;
                    }
                    selectionMap[`${item.product.id}-${item.variant.id}`] = {
                        collectionId: "469929230649",
                        externalProductId: `${item.product.id}`,
                        externalVariantId: `${item.variant.id}`,
                        sellingPlan,
                        quantity: item.quantity,
                    }
                }
            }

            const selections = [];
            const selectionKeys = Object.keys(selectionMap);
            for (let i = 0; i < selectionKeys.length; i++) {
                selections.push(selectionMap[selectionKeys[i]])
            }

            if (bundleVariantId && bundleSellingPlan && selections) {
                const bundleProductData = {
                    productId: '9038832632121',
                    variantId: bundleVariantId,
                    sellingPlan: bundleSellingPlan,
                    handle: 'subscribe-save-base',
                }
                const bundle = {
                    externalVariantId: bundleProductData.variantId,
                    externalProductId: bundleProductData.productId,
                    selections
                };
                
                const cartItems = await recharge.bundle.getDynamicBundleItems(bundle, bundleProductData.handle);
                const cartData = { items: cartItems };

                await fetch(window.Shopify.routes.root + 'cart/add.js', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(cartData),
                })

                const newCart = await getCart();
                setCart(newCart);

                setCartState({
                    ...cartState,
                    items: []
                });

                window.location.href = '/checkout';
            }
        } else {
            window.location.href = '/checkout';
        }
    }

    Zipify.OCU.api.callbackBeforeRedirect = (dispatcher, event) => {
        return new Promise(async (resolve) => {
            try {
                if (dispatcher.destination === 'checkout') {
                    await checkout();
                    return resolve({});
                }
    
                const { response, type } = event.detail;
                if (!(type === 'Upgrade' && response.accepted)) return resolve({});
    
                dispatcher._upsellAppInstance().hide();
                setTimeout(() => Zipify.OCU.api.store.set('submitted', false));
            } catch (e) {
                await checkout();
                resolve({});
            }
        });
    };

    return <div className={`relative ${isOpen === true ? 'z-50' : '-z-10'}`} aria-labelledby="slide-over-title" role="dialog" aria-modal="true">
        {
            isOpen ? <div className="fixed inset-0 -z-10 bg-slate-900/20 cursor-pointer" /> : null
        }
        <div className={`fixed z-10 inset-0 overflow-hidden`}>
          <div className="absolute inset-0 overflow-hidden">
            <div className="pointer-events-none fixed inset-y-0 right-0 flex max-w-full pl-10">
              <div className={`pointer-events-auto z-20 w-screen max-w-md ${isOpen ? 'transform transition ease-in-out duration-500 sm:duration-700 translate-x-0' : 'transform transition ease-in-out duration-500 sm:duration-700 translate-x-full'}`}>
                <div className="flex h-full flex-col divide-y divide-neutral-200 bg-white shadow-xl">
                  <div className="flex min-h-0 flex-1 flex-col overflow-y-auto pb-6">
                    <div className="px-4 sm:px-6 bg-cyan-700 py-4">
                      <div className="flex items-center justify-between">
                        <h2 className="font-accent text-white text-2xl lg:text-4xl" id="slide-over-title">Your Cart</h2>
                        <div className="ml-3 flex h-7 items-center">
                          <button onClick={() => setIsOpen(false)} type="button" className="relative rounded-md text-white hover:text-cyan-50 focus:outline-none focus:ring-2 focus:ring-cyan-100">
                            <span className="absolute -inset-2.5"></span>
                            <span className="sr-only">Close panel</span>
                            <svg className="h-6 w-6 lg:h-10 lg:w-10" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
                              <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                          </button>
                        </div>
                      </div>
                    </div>
                    <div className="relative mt-8 flex-1 px-4 sm:px-6 flex flex-col space-y-8">
                        {
                            cart.items.length || cartState.items.length || loadingCheckout ? <div className="flex flex-col space-y-4">
                                <div className="flex w-full h-1.5 bg-neutral-200 rounded-full overflow-hidden" role="progressbar" aria-valuenow={totalSubscriptionItems > 1 ? 100 : Math.round(cartSubtotal*100/5900)} aria-valuemin="0" aria-valuemax="100">
                                    <div style={shippingStyle} className={`flex flex-col transition-all delay-200 justify-center rounded-full overflow-hidden bg-cyan-700 text-xs text-white text-center whitespace-nowrap transition duration-500`} />
                                </div>
                                <h4 className="px-4 font-accent text-lg text-center text-cyan-700 leading-[1.25rem]">{
                                    (cartSubtotal >= 5900 || totalSubscriptionItems > 1) ? "Congratulations! You've unlocked free shipping." : `You're only $${((5900 - cartSubtotal) / 100).toFixed(2)} away from free shipping!`
                                }</h4>
                            </div> : <div className="flex flex-col pt-20 lg:pt-40 max-w-xs self-center">
                                <svg viewBox="0 0 64 64" xmlns="http://www.w3.org/2000/svg" className="self-center h-40 w-40 text-cyan-700"><path fill="currentColor" d="m51.36 21.21c.03-.37.04-.74.04-1.11a13.285 13.285 0 0 0 -4.23-9.62c-4.25-4.26-9.4-5.32-15.3-3.15l-2.87-2.88a8.389 8.389 0 0 0 -11.85 0l-1.95 1.95a8.383 8.383 0 0 0 0 11.85l1 1c-1.64 1.86-2.71 3.26-3.01 3.68-.02.01-.02.02-.03.03-.04.05-.06.08-.07.09-.03.05-.06.09-.09.14-1.94 2.73 3.9 9.82 7.77 13.69 3.35 3.35 9.11 8.17 12.37 8.17a2.152 2.152 0 0 0 1.46-.49c.02-.02.06-.05.12-.1 1.58-1.16 15.75-11.95 16.64-23.25zm-36.78 3.15a.855.855 0 0 1 .37-.01l.32.05c.04.01.08.02.13.03a.689.689 0 0 0 .08.03.944.944 0 0 0 .09.03l.08.02a1.28 1.28 0 0 0 .17.05c.08.04.17.07.27.11 2.44.98 6.13 3.76 9.63 7.26s6.28 7.19 7.27 9.64l.08.22c.01.02.01.04.02.06l.03.09c0 .01.01.01.01.02s.01.03.02.05a.857.857 0 0 1 .03.13c.01.02.01.04.02.06a1.209 1.209 0 0 1 .05.18.371.371 0 0 0 .02.09v.01c.01.06.02.12.03.2a.969.969 0 0 1 0 .36c-.9.36-5.42-1.88-11.12-7.57-5.75-5.76-7.98-10.32-7.6-11.11zm20.54 17.26h-.01v-.01c-.01-.03-.02-.06-.03-.1a1.209 1.209 0 0 0 -.05-.18l-.03-.06v-.01a.031.031 0 0 0 -.01-.02c-.01-.03-.02-.09-.03-.12-.04-.1-.08-.21-.12-.3-1.09-2.71-3.97-6.56-7.71-10.3s-7.59-6.62-10.29-7.7c-.11-.05-.22-.09-.37-.15a.254.254 0 0 1 -.07-.02c-.01-.01-.01-.01-.02-.01h-.01a.06.06 0 0 0 -.04-.01l-.01-.01a.647.647 0 0 0 -.13-.04.539.539 0 0 0 -.1-.03c-.02 0-.04-.01-.06-.01.59-.73 1.37-1.65 2.29-2.66a1.007 1.007 0 0 0 -.03-1.38l-1.68-1.67a6.4 6.4 0 0 1 0-9.02l1.95-1.95a6.4 6.4 0 0 1 9.02 0l3.24 3.25a1 1 0 0 0 1.16.31 14.7 14.7 0 0 1 5.51-1.16 11.414 11.414 0 0 1 8.27 3.63 11.322 11.322 0 0 1 3.61 9.16c-.67 8.59-10.27 17.31-14.25 20.57z"/><path fill="currentColor" d="m26.75 6.7a5.215 5.215 0 0 0 -7.35 0l-1.95 1.95a5.2 5.2 0 0 0 0 7.35l1.63 1.62a.96.96 0 0 0 .7.29.982.982 0 0 0 .71-.29 41.864 41.864 0 0 1 8.61-6.78 1.012 1.012 0 0 0 .21-1.58zm-6.96 8.81-.92-.93a3.136 3.136 0 0 1 -.94-2.26 3.17 3.17 0 0 1 .94-2.26l1.94-1.94a3.187 3.187 0 0 1 4.52 0l1.66 1.65a44.523 44.523 0 0 0 -7.2 5.74z"/><path fill="currentColor" d="m32.24 46.53c-.49.72-4.8 7.06-4.8 9.85a5.625 5.625 0 0 0 11.25 0c0-2.79-4.31-9.13-4.8-9.85a1.043 1.043 0 0 0 -1.65 0z"/></svg>
                                <h4 className="text-xl font-accent text-center text-cyan-700 mt-4">It's a little empty around here.</h4>
                                <p className="text-base text-center text-neutral-700 mt-1">Looks like you haven't added any items to your cart yet</p>
                            </div>
                        }
                        {
                            cartState.items.length ? <div className="flex flex-col space-y-4">
                                <div className="flex items-center space-x-2">
                                    <div className="flex-1 h-1 rounded bg-cyan-700" />
                                    <h4 className="text-cyan-700 font-accent text-xl lg:text-2xl">Long Run Club</h4>
                                    <div className="flex-1 h-1 rounded bg-cyan-700" />
                                </div>
                                <div className="flex flex-col space-y-2">
                                    {% comment %} progress bar & tier name {% endcomment %}
                                    {
                                        plan ? <div className="flex items-center justify-between">
                                            <div className="flex w-2/3 rounded-full bg-cyan-50 h-3">
                                                <div
                                                className={`bg-cyan-500 rounded-full h-full transition-all delay-200 ${plan.type === "base" ? "w-1/3" : plan.type === "pro" ? "w-2/3" : "w-full"}`}
                                                ></div>
                                            </div>
                                            <div className="flex items-center space-x-1.5">
                                                <h4 className="text-cyan-800 text-xl font-accent">{plan.display_name}</h4>
                                                <button onClick={() => window.location.href = '/pages/coffee-club'}>
                                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none">
                                                    <path d="M8.66667 10.6667H8V8H7.33333M8 5.33333H8.00667M14 8C14 11.3137 11.3137 14 8 14C4.68629 14 2 11.3137 2 8C2 4.68629 4.68629 2 8 2C11.3137 2 14 4.68629 14 8Z" stroke="#86D7E1" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                                                </svg>
                                                </button>
                                            </div>
                                        </div> : cartState.items.length ? <p className="text-sm text-tan-600 text-center">Add {plans.base.bag_min - totalSubscriptionItems} more bag to be eligible for our {plans.base.display_name} plan!</p> : null
                                    }
                                    {% comment %} tier benefits {% endcomment %}
                                    <div className="grid grid-cols-2 gap-y-1">
                                        {
                                            plan ? plan.perk_list.map(p => <div key={p} className="flex items-center space-x-2">
                                                <svg
                                                    xmlns="http://www.w3.org/2000/svg"
                                                    viewBox="0 0 24 24"
                                                    fill="currentColor"
                                                    className="w-6 h-6 text-cyan-400"
                                                >
                                                    <path fillRule="evenodd" d="M19.916 4.626a.75.75 0 01.208 1.04l-9 13.5a.75.75 0 01-1.154.114l-6-6a.75.75 0 011.06-1.06l5.353 5.353 8.493-12.739a.75.75 0 011.04-.208z" clipRule="evenodd" />
                                                </svg>
                                                <span className="text-cyan-800 text-base leading-[1.2rem]">{p}</span>
                                            </div>) : null
                                        }
                                    </div>
                                    <div className="grid grid-cols-3 gap-3">
                                        {
                                          cartState.items.map((item, i) => <SubscriptionItem key={item.variantID} index={i} item={item} cartState={cartState} setCartState={setCartState} />)
                                        }
                                    </div>
                                </div>
                            </div> : null
                        }
                        {
                            cartState.items.length && (!plan || plan.display_name !== nextPlan.display_name) ? <div className="flex flex-col space-y-4">
                                <div className="flex items-center space-x-2">
                                    <div className="flex-1 h-1 rounded bg-cyan-700" />
                                    <h4 className="text-cyan-700 font-accent text-xl lg:text-2xl">Add {nextPlan.bag_min - totalSubscriptionItems} more and get</h4>
                                    <div className="flex-1 h-1 rounded bg-cyan-700" />
                                </div>
                                <div className="mt-2 grid grid-cols-2 gap-y-1">
                                    {
                                        nextPerks.map(p => <div key={p} className="flex items-center space-x-2">
                                        <svg
                                            xmlns="http://www.w3.org/2000/svg"
                                            viewBox="0 0 24 24"
                                            fill="currentColor"
                                            className="w-6 h-6 text-cyan-400"
                                        >
                                            <path fillRule="evenodd" d="M12 3.75a.75.75 0 01.75.75v6.75h6.75a.75.75 0 010 1.5h-6.75v6.75a.75.75 0 01-1.5 0v-6.75H4.5a.75.75 0 010-1.5h6.75V4.5a.75.75 0 01.75-.75z" clipRule="evenodd" />
                                        </svg>
                                        <span className="text-cyan-800 text-base">{p}</span>
                                        </div>)
                                    }
                                </div>
                                <div>
                                    {% render 'lrc-button', link: "/collections/subscribe-save", title: "Get More" %}
                                </div>
                            </div> : null
                        }
                        {
                            !isCartOnlyGiftItems(cart.items, totalSubscriptionItems) && cartContainsGiftItems(cart.items, totalSubscriptionItems) ? <div className="flex flex-col space-y-4">
                                <div className="flex items-center space-x-2">
                                    <div className="flex-1 h-1 rounded bg-cyan-700" />
                                    <h4 className="text-cyan-700 font-accent text-xl lg:text-2xl">Free Bonus Items</h4>
                                    <div className="flex-1 h-1 rounded bg-cyan-700" />
                                </div>
                                <div className="grid grid-cols-3 gap-3">
                                    {
                                        cart.items.filter(item => item.product_type === "Gift").map(item => <BonusItem key={item.variant_id} href={item.url} title={item.product_title} image={`${item.featured_image.url}&width=150`} />)
                                    }
                                    {
                                        totalSubscriptionItems > 0 ? <BonusItem key={1} title="Club Exclusive - Experimental Flavor" href="/products/experimental-flavor-trail-mix-copy" header="Items added post-purchase" image="https://cdn.shopify.com/s/files/1/0761/6924/9081/files/Experimental_cea45969-90e9-441e-84fe-3c323b7266a2.png?v=1714574438&width=150" quantity={2} /> : null
                                    }
                                    {
                                        totalSubscriptionItems > 2 ? <BonusItem key={2} title="Club Exclusive - LRC x YETI Tumbler" href="/products/hydro-flask-bottle" header="Shipped after 3rd fulfillment" image="https://cdn.shopify.com/s/files/1/0761/6924/9081/files/1_0b4419a0-4d8f-4a4a-bb5e-cb3ac2715b72.png?v=1715952235&width=150" /> : null
                                    }
                                    {
                                        totalSubscriptionItems > 3 ? <BonusItem key={3} title="Club Exclusive - LRC x BOCO Run Hat" href="/products/boco-run-hat" header="Shipped after 3rd fulfillment" image="https://cdn.shopify.com/s/files/1/0761/6924/9081/files/ClubHat.png?v=1714937792&width=150" /> : null
                                    }
                                    {
                                        totalSubscriptionItems > 1 && new Date() < new Date("May 24, 2024 12:00:00") ? <BonusItem key={4} title="Limited Offer - 1 Free Bag of Run Brunch" href="/blogs/news/run-brunch-is-here" header="Flavor selected post-purchase" image="https://cdn.shopify.com/s/files/1/0761/6924/9081/files/gempages_484137708004836523-f35452c1-f0c8-4d53-a53d-8d78405d9b8d.png?v=1715978716" /> : null
                                    }
                                </div>
                            </div> : null
                        }
                        {
                            isCartOnlyGiftItems(cart.items, totalSubscriptionItems) || cart.items.length == 0 ? null : <div className="flex flex-col space-y-4">
                                <div className="flex items-center space-x-2">
                                    <div className="flex-1 h-1 rounded bg-cyan-700" />
                                        <h4 className="text-cyan-700 font-accent text-xl lg:text-2xl">One-Time</h4>
                                    <div className="flex-1 h-1 rounded bg-cyan-700" />
                                </div>
                                <div className="grid grid-cols-3 gap-3">
                                {
                                    cart.items.filter(item => item.product_type !== 'Gift').map((item, i) => <CartItem key={item.variant_id} item={item} setCart={setCart} />)
                                }
                                </div>
                                {
                                    potentialSavings > 0 ? <div className="flex items-center justify-center">
                                        <button disabled={loadingUpgrade} onClick={async () => {
                                            setLoadingUpgrade(true);
                                            const keys = Object.keys(cartProductSubscribable);
                                            const newItems = [...cartState.items];
                                            const vo = {};
    
                                            for (let i = 0; i < keys.length; i++) {
                                                if (cartProductSubscribable[keys[i]]) {
                                                    const item = cartProductSubscribable[keys[i]]
                                                    let existingItemIndex = null;
                                                    for (let j = 0; j < newItems.length; j++) {
                                                        if (newItems[j].variantID == item.variantID) {
                                                            existingItemIndex = j;
                                                        }
                                                    }
                                                    if (existingItemIndex !== null) {
                                                        newItems[existingItemIndex].quantity += item.quantity;
                                                    } else {
                                                        newItems.push({
                                                            ...item,
                                                            quantity: item.quantity
                                                        })
                                                    }
                                                    vo[item.variantID] = 0;
                                                }
                                            }
                                            fetch(window.Shopify.routes.root + 'cart/update.js', {
                                                method: 'POST',
                                                headers: {
                                                    'Content-Type': 'application/json',
                                                },
                                                body: JSON.stringify({
                                                    updates: vo
                                                })
                                            })
                                            .then(async response => {
                                                const newCart = await getCart();
                                                setCartState({
                                                    ...cartState,
                                                    items: newItems
                                                })
                                                setCart(newCart);
                                                setLoadingUpgrade(false);
                                            })
                                            .catch((error) => {
                                                console.error('Error:', error);
                                            });
                                        }} className="inline-flex items-center rounded-md bg-tan-100 px-2 py-1 text-xs font-semibold text-tan-700 ring-1 ring-inset ring-tan-600/40 relative">
                                            <span>Save ${(potentialSavings / 100).toFixed(2)} with subscribe and save!</span>
                                            <svg viewBox="0 0 512.001 512.001" className="text-tan-700 absolute -right-3 -bottom-3 w-5 h-5 z-10">
                                                <path fill="currentColor" d="M429.742,319.31L82.49,0l-0.231,471.744l105.375-100.826l61.89,141.083l96.559-42.358l-61.89-141.083L429.742,319.31z
                                                    M306.563,454.222l-41.62,18.259l-67.066-152.879l-85.589,81.894l0.164-333.193l245.264,225.529l-118.219,7.512L306.563,454.222z"
                                                />
                                            </svg>
                                        </button>
                                    </div> : null
                                }
                            </div>
                        }
                        {
                            isCartOnlyGiftItems(cart.items, totalSubscriptionItems) || (cart.items.length == 0 && totalSubscriptionItems == 0) ? null : upsellItems.filter(item => {
                                let found = false;
                                cart.items.forEach(ca => {
                                    if (ca.product_id == item.id) {
                                        found = true;
                                    }
                                })
                                return !found;
                              }).length ? <div className="flex flex-col space-y-4">
                                <div className="flex items-center space-x-2">
                                    <div className="flex-1 h-1 rounded bg-cyan-700" />
                                        <h4 className="text-cyan-700 font-accent text-xl lg:text-2xl">Add Ons</h4>
                                    <div className="flex-1 h-1 rounded bg-cyan-700" />
                                </div>
                                <div className="grid grid-cols-3 gap-3">
                                    {
                                      upsellItems.filter(item => {
                                        let found = false;
                                        cart.items.forEach(ca => {
                                            if (ca.product_id == item.id) {
                                                found = true;
                                            }
                                        })
                                        return !found;
                                      }).map((item, i) => <UpsellItem item={item} setCart={setCart} />)
                                    }
                                </div>
                            </div> : null
                        }
                    </div>
                  </div>
                  <div className="flex flex-col space-y-2 flex-shrink-0 justify-end px-4 py-4">
                    <div className="flex items-center">
                        <h4 className="flex-1 text-lg font-accent text-cyan-700">Subtotal</h4>
                        {
                            cartState.items.length ? <React.Fragment>
                                <span className={`line-through text-base text-neutral-500`}>${(cartSubtotal / 100).toFixed(2)}</span>
                                <span className={`ml-2 text-base font-medium text-cyan-700`}>${(cartSubtotalWithDiscounts / 100).toFixed(2)}</span>
                            </React.Fragment> : <span className={`font-medium text-base text-cyan-700`}>${(cartSubtotal / 100).toFixed(2)}</span>
                        }
                    </div>
                    <div className="grid grid-cols-2 gap-2">
                        <button type="button" onClick={() => setIsOpen(false)} className="rounded-md bg-white p-3 text-sm font-accent text-neutral-700 shadow-sm ring-1 ring-inset ring-neutral-300 hover:ring-neutral-400">Back to Shop</button>
                        <button disabled={checkoutStatus(cartState, cart, plan) !== 'OKAY'} onClick={checkout} type="submit" id="checkout-button" className={`ml-4 inline-flex justify-center rounded-md p-3 text-sm font-accent border ${checkoutStatus(cartState, cart, plan) !== 'OKAY' ? 'cursor-not-allowed has-tooltip border-neutral-600 bg-neutral-100 text-neutral-400 hover:border-neutral-700 hover:text-neutral-500 hover:bg-neutral-200' : 'border-tan-600 bg-tan-100 text-tan-600 hover:border-tan-700 hover:text-tan-700 hover:bg-tan-200'}`}>
                            {
                                loadingCheckout ? <svg className="animate-spin h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" />
                                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z" />
                                </svg> : "Checkout"
                            }
                            {
                                checkoutStatus(cartState, cart, plan) === 'SUBSCRIBE_AND_SAVE_MINIMUM_BAG_COUNT' ? <span class='tooltip rounded shadow p-1.5 bg-tan-50 text-tan-700 text-sm -mt-24 lg:-mt-16 text-center'>Subscribe & Save requires a 2 bag minumum</span> : null
                            }
                        </button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
  }

  ReactDOM.render(<LRCCart />, document.getElementById('lrc-cart'));
</script>
