{{ 'jquery.min.js' | asset_url | script_tag }}
{{ 'cart.min.js' | asset_url | script_tag }}

<div id="lrc-subscription-cart"></div>

<script
  type="text/babel"
>
  recharge.init({
    storeIdentifier: 'longruncoffee.myshopify.com',
    storefrontAccessToken: 'strfnt_554c548c9ee33e7dfb04ba981797a8e49a71423f554234f212fbc4de1cb26d63',
  });

  const referenceString = 'v2-subscription-items';
  CartJS.init({{ cart | json }}, {
    "moneyFormat": "{{ shop.money_format }}",
    "moneyWithCurrencyFormat": "{{ shop.money_with_currency_format }}"
  });

  function isRechargeAvailableOnProduct(product) {
    let available = false;
    for (let i = 0; i < product.selling_plan_groups.length; i++) {
      if (product.selling_plan_groups[i].app_id === "294517") {
        available = true;
      }
    }
    return available;
  }

  const plans = {
    base: {
      display_name: "base",
      bag_min: 1,
      perk_list: ['10% savings', 'Experimental samples'],
      discount: 0.10,
      type: 'base'
    },
    pro: {
      display_name: "Pro",
      bag_min: 3,
      perk_list: ['20% savings', 'Free shipping', 'Experimental samples', 'Free Hydro Flask'],
      discount: 0.2,
      type: 'pro'
    },
    elite: {
      display_name: "Elite",
      bag_min: 4, // or 5 pound bag
      perk_list: ['25% savings', 'Free shipping', 'Experimental samples', 'Free Hydro Flask', 'Free BOCO hat'],
      discount: 0.25,
      type: 'elite'
    }
  };

  function calculateCurrentTier(items, plans) {
    // return object
    let next_perks = null;
    let plan = null;
    let next_tier_number = null;
    let total_with_discount = 0;
    let total_no_discount = 0;
    let total = 0;

    // total price
    items.forEach((i) => {
      total += i.variant.price;
    });
    total_no_discount = (total / 100).toFixed(2);

    // tier information
    if (items.length >= plans.elite.bag_min) {
      plan = plans.elite;
      next_perks = null;
    } else if (items.length >= plans.pro.bag_min) {
      plan = plans.pro;
      next_perks = plans.elite.perk_list;
    } else if (items.length >= plans.base.bag_min) {
      plan = plans.base;
      next_perks = plans.pro.perk_list;
    } else {
      plan = null;
      next_perks = plans.base.perk_list;
    }
    if (next_perks && plan) {
      if (plan.type === 'base' && items.length === 1) {
        next_tier_number = 2;
      } else {
        next_tier_number = 1;
      }
    } else {
      next_tier_number = 1;
    }

    // apply discount
    if (plan) {
      total_with_discount = ((total - total * plan.discount) / 100).toFixed(2)
    } else {
      total_with_discount = (total / 100).toFixed(2);
    }

    return {
      next_perks,
      plan,
      next_tier_number,
      total,
      total_no_discount,
      total_with_discount  
    }
  }

  function calculateNextTier(items, plans) {
    const amt = items.length + 1;
    let nextPlan = null;

    // tier information
    if (amt >= plans.elite.bag_min) {
      nextPlan = plans.elite;
    } else if (amt >= plans.pro.bag_min) {
      nextPlan = plans.pro;
    } else if (amt >= plans.base.bag_min) {
      nextPlan = plans.base;
    }
    return nextPlan;
  }

  function calculateBulkServingCost(productVariant) {
    let totalCost = 0;
    let totalServings = 0;
    for (let i = 0; i < productVariant.length; i++) {
      totalCost += productVariant[i].variant.price;
      const sizeString = productVariant[i].variant.option1;
      switch (sizeString) {
        case "12 oz":
          totalServings += 30;
          break;
        case "1 lbs":
          totalServings += 40;
          break;
        case "5 lbs":
          totalServings += 200;
          break;
      }
    }
    const {total_with_discount} = calculateCurrentTier(productVariant, plans);
    if (totalCost && totalServings && total_with_discount) {
      return `$${(total_with_discount / totalServings).toFixed(2)} / serving`;
    } else {
      return '';
    }
  }

  function LRCSubscriptionCart() {
    const [cartState, innerSetCartState] = React.useState(CartJS.getAttribute(referenceString) ? JSON.parse(CartJS.getAttribute(referenceString)) : {
      isOpen: false,
      items: [],
      displayComponent: 'landing',
      recommendations: [],
      quantity_pref: null, ground_pref: [], flavor_pref: null, roast_pref: []
    })

    const {
      next_perks,
      plan,
      next_tier_number,
      total,
      total_no_discount,
      total_with_discount
    } = calculateCurrentTier(cartState.items, plans)

    const setCartState = (newCartState) => {
      CartJS.setAttribute(referenceString, JSON.stringify(newCartState))
      if (newCartState.items.length) {
        if (newCartState.items.length !== cartState.items.length) {
          const p = calculateNextTier(newCartState.items, plans)
          document.dispatchEvent(new CustomEvent('subscription_changed', { detail: { newDiscount: p.discount, nextPlan: p } }))
        }
      } else {
        if (newCartState.items.length !== cartState.items.length) {
          document.dispatchEvent(new CustomEvent('subscription_changed', { detail: { newDiscount: 0.1, nextPlan: plans.base } }))
        }
      }
      innerSetCartState(newCartState)
    }

    const checkout = async () => {
      if (!cartState || !cartState.items || !cartState.items.length) {
        return;
      }

      // calculate tier based on items
      let bundleVariantId = null;
      if (plan.display_name.toLowerCase() === 'base') {
        bundleVariantId = '47884295078201';
      } else if (plan.display_name.toLowerCase() === 'pro') {
        bundleVariantId = '47884295110969';
      } else if (plan.display_name.toLowerCase() === 'elite') {
        bundleVariantId = '47884295143737';
      } else {
        console.error("subscription plan not found")
      }

      // pluck selling plan from items[0].product.selling_plan_groups[name === 'Base'].selling_plans[0].options[0].value
      let bundleSellingPlan = null;
      for (let i = 0; i < cartState.items[0].product.selling_plan_groups.length; i++) {
        if (cartState.items[0].product.selling_plan_groups[i].name.toLowerCase() === plan.display_name.toLowerCase()) {
          bundleSellingPlan = cartState.items[0].product.selling_plan_groups[i].options[0].values[0]
        }
      }

      // iterate through items and add to selection array with sellingPlan = items[0].product.selling_plan_groups[name === 'Base'].selling_plans[0].id
      // instead of pushing duplicates add to single selection
      const selectionMap = {};
      for (let i = 0; i < cartState.items.length; i++) {
        const item = cartState.items[i];
        if (selectionMap[`${item.product.id}-${item.variant.id}`]) {
          selectionMap[`${item.product.id}-${item.variant.id}`].quantity += 1;
        } else {
          let sellingPlan = null;
          for (let j = 0; j < item.product.selling_plan_groups.length; j++) {
            if (item.product.selling_plan_groups[j].name.toLowerCase() === plan.display_name.toLowerCase()) {
              sellingPlan = item.product.selling_plan_groups[j].selling_plans[0].id;
            }
          }
          if (!sellingPlan) {
            return;
          }
          selectionMap[`${item.product.id}-${item.variant.id}`] = {
            collectionId: "469929230649",
            externalProductId: `${item.product.id}`,
            externalVariantId: `${item.variant.id}`,
            sellingPlan,
            quantity: 1,
          }
        }
      }

      const selections = [];
      const selectionKeys = Object.keys(selectionMap);
      for (let i = 0; i < selectionKeys.length; i++) {
        selections.push(selectionMap[selectionKeys[i]])
      }

      if (bundleVariantId && bundleSellingPlan && selections) {
        const bundleProductData = {
          productId: '9038832632121',
          variantId: bundleVariantId,
          sellingPlan: bundleSellingPlan,
          handle: 'subscribe-save-base',
        }
        const bundle = {
          externalVariantId: bundleProductData.variantId,
          externalProductId: bundleProductData.productId,
          selections
        };
        
        const cartItems = await recharge.bundle.getDynamicBundleItems(bundle, bundleProductData.handle);
        const cartData = { items: cartItems };
  
        await fetch(window.Shopify.routes.root + 'cart/add.js', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(cartData),
        }).catch(e => console.log(e));
      
        setCartState({
          ...cartState,
          isOpen: false,
          items: [],
        });

        window.location.href = '/checkout';
      }
    }

    React.useEffect(() => {
      const handler = (data) => {
        if (!cartState.isOpen) {
          setCartState({
            ...cartState,
            isOpen: true
          })
        } else {
          setCartState({
            ...cartState,
            isOpen: false
          })
        }
      }
      document.addEventListener('cart_toggle', handler);
      return () => {
        document.removeEventListener('cart_toggle', handler);
      }
    }, [])

    // listen for buy-button-click
    React.useEffect(() => {
      const listener = function(event) {
        if (event.target.matches('button#lrc-buy-button')) {
          event.preventDefault();
          const variantID = event.target.dataset.variantId
          const isSubscription = event.target.dataset.isSubscription
          const quantity = Number(event.target.dataset.quantity)
          const url = $(location).attr('href').split('/')
          const product_hash = url[url.length - 1]

          if (isSubscription == "true") {
            if (variantID && product_hash) {
              jQuery.getJSON(window.Shopify.routes.root + `products/${product_hash}.js`, function (product) {
                let variant;
                for (let j = 0; j < product.variants.length; j++) {
                  if (product.variants[j].id == variantID) {
                    variant = product.variants[j];
                  }
                }
                setCartState({
                  ...cartState,
                  isOpen: true,
                  displayComponent: 'cart',
                  items: [...cartState.items, {
                    product,
                    variantID,
                    variant
                  }]
                })
              })
            } else {
              console.log('not found.')
            }
          } else {
            CartJS.addItem(variantID, quantity, null, {
                "success": function(data, textStatus, jqXHR) {
                  window.location.href = '/cart';
                }
            });
          }
        }
      };
      document.addEventListener('click', listener, false);
      return () => {
        document.removeEventListener('click', listener)
      }
    }, [cartState.items.length]);

    // listen to calculate recommendations
    React.useEffect(() => {
      let mounted = true;
      function fetchRecommendations() {
        const {items, ground_pref, flavor_pref} = cartState;
        if (items && items.length) {
          let preferredItemSize = '1 lbs';
          let preferredItemStyle = 'Fresh Ground';

          if (items[0] && items[0].variant && items[0].variant.options.length) {
            preferredItemSize = items[0].variant.options[0];
            preferredItemStyle = items[0].variant.options[1];
          }

          const deferredHandlers = items.map((item) => new Promise((resolve, reject) => {
            jQuery.getJSON(window.Shopify.routes.root + `recommendations/products.json?product_id=${item.product.id}`, function(response) {
              const list = response.products.filter(p => isRechargeAvailableOnProduct(p)).map(p => {
                let selectedVariant = p.variants[0];
                for (let i = 0; i < p.variants.length; i++) {
                  if (p.variants[i].options[0] === preferredItemSize && p.variants[i].options[1] === preferredItemStyle) {
                    selectedVariant = p.variants[i];
                  }
                }
                return {
                  product: p,
                  variant_title: `${selectedVariant.option1}, ${selectedVariant.option2}`,
                  variantID: selectedVariant.id,
                  variant: selectedVariant
                }
              });
              resolve(list);
            })
          }))
          Promise.all(deferredHandlers).then(res => {
            let recommendations = [];
            res.forEach(r => {
              recommendations = recommendations.concat(r)
            });

            // unique array
            let result = [];
            const map = new Map();
            for (const item of recommendations) {
                if(!map.has(item.variantID)){
                  map.set(item.variantID, true);
                  result.push(item);
                }
            }

            // order based on quiz results
            for (let i = 0; i < result.length; i++) {
              result[i].score = 0;
              
              // ground pref
              if (ground_pref.indexOf(result[i].variant.option2) !== -1) {
                result[i].score++;
              }

              // flavor pref
              if (flavor_pref === "yes") {
                if (result[i].product.tags.indexOf("Flavor") !== -1) {
                  result[i].score++;
                }
              } else if (flavor_pref === "no") {
                if (result[i].product.tags.indexOf("Flavor") === -1) {
                  result[i].score++;
                }
              }

              // roast pref
              ground_pref.forEach(gp => {
                if (result[i].product.tags.indexOf(gp) !== -1) {
                  result[i].score++;
                }
              });
            }
            result.sort((a, b) => b.score - a.score)

            // limit to 6 suggestions
            if (result.length > 6) {
              result = result.splice(0, 6);
            }
            if (mounted) {
              setCartState({
                ...cartState,
                recommendations: result
              })
            }
          })
        } else {
          let preferredItemSize = '1 lbs';
          let preferredItemStyle = 'Fresh Ground';
          const deferredHandlers = [8281669206329, 8281667764537, 8281658229049].map((item) => new Promise((resolve, reject) => {
            jQuery.getJSON(window.Shopify.routes.root + `recommendations/products.json?product_id=${item}`, function(response) {
              console.log(response)
              const list = response.products.filter(p => p.selling_plan_groups.length).map(p => {
                let selectedVariant = p.variants[0];
                for (let i = 0; i < p.variants.length; i++) {
                  if (p.variants[i].options[0] === preferredItemSize && p.variants[i].options[1] === preferredItemStyle) {
                    selectedVariant = p.variants[i];
                  }
                }
                return {
                  product: p,
                  variant_title: `${selectedVariant.option1}, ${selectedVariant.option2}`,
                  variantID: selectedVariant.id,
                  variant: selectedVariant
                }
              });
              resolve(list);
            })
          }))
          Promise.all(deferredHandlers).then(res => {
            let recommendations = [];
            res.forEach(r => {
              recommendations = recommendations.concat(r)
            });

            // unique array
            let result = [];
            const map = new Map();
            for (const item of recommendations) {
                if(!map.has(item.variantID)){
                  map.set(item.variantID, true);
                  result.push(item);
                }
            }

            // order based on quiz results
            for (let i = 0; i < result.length; i++) {
              result[i].score = 0;
              
              // ground pref
              if (ground_pref.indexOf(result[i].variant.option2) !== -1) {
                result[i].score++;
              }

              // flavor pref
              if (flavor_pref === "yes") {
                if (result[i].product.tags.indexOf("Flavor") !== -1) {
                  result[i].score++;
                }
              } else if (flavor_pref === "no") {
                if (result[i].product.tags.indexOf("Flavor") === -1) {
                  result[i].score++;
                }
              }

              // roast pref
              ground_pref.forEach(gp => {
                if (result[i].product.tags.indexOf(gp) !== -1) {
                  result[i].score++;
                }
              });
            }
            result.sort((a, b) => b.score - a.score)

            // limit to 6 suggestions
            if (result.length > 6) {
              result = result.splice(0, 6);
            }
            if (mounted) {
              setCartState({
                ...cartState,
                recommendations: result
              })
            }
          })
        }
      }
      fetchRecommendations();
      return () => {
        mounted = false;
      }
    }, [cartState.items.length, cartState.ground_pref, cartState.flavor_pref])

    return (
      <React.Fragment>
        {
          cartState.items.length ? <div className="fixed right-0 bottom-0 lg:right-3 lg:bottom-3 z-40">
            <div className="z-40 shadow-xl border-inset border border-tan-200 bg-white w-screen max-w-md p-3 flex flex-col space-y-4 lg:rounded-md">
              <div className="flex items-center justify-between">
                <div className="flex w-2/3 rounded-full bg-cyan-50 h-3">
                  <div
                    className={`bg-cyan-500 rounded-full h-full transition-all delay-200 ${plan.type === "base" ? "w-1/3" : plan.type === "pro" ? "w-2/3" : "w-full"}`}
                  />
                </div>
                <div className="flex items-center space-x-1.5">
                  <h4 className="text-cyan-800 text-xl font-accent">{plan.display_name}</h4>
                  <button onClick={() => window.location.href = '/pages/coffee-club'}>
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none">
                      <path d="M8.66667 10.6667H8V8H7.33333M8 5.33333H8.00667M14 8C14 11.3137 11.3137 14 8 14C4.68629 14 2 11.3137 2 8C2 4.68629 4.68629 2 8 2C11.3137 2 14 4.68629 14 8Z" stroke="#86D7E1" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                    </svg>
                  </button>
                </div>
              </div>
              <div className="flex space-x-4 overflow-x-auto">
                {
                  cartState.items.map((item, i) => <img
                    key={i}
                    src={item.product.featured_image}
                    loading="lazy"
                    className="w-1/4 h-20 object-contain rounded-md border border-dashed border-cyan-200"
                  />)
                }
                {
                  cartState.items.length < 4 ? Array.from(Array(4-cartState.items.length)).map(i => <div key={i} className="w-1/4 bg-tan-50 rounded-md border border-dashed border-tan-200 flex items-center justify-center text-tan-200">
                    <svg
                      width="100%"
                      viewBox="0 0 1024 1024"
                      className="w-12 h-12"
                    >
                      <path fill="currentColor" opacity="1.000000" stroke="none"
                        d="
                      M429.256287,561.227173
                        C454.622894,541.639832 482.452393,528.409790 513.887024,523.175415
                        C530.124268,520.471680 546.312012,520.085205 562.481689,523.643066
                        C568.332703,524.930481 573.465881,527.382812 575.021423,533.651062
                        C576.617188,540.081848 574.888184,545.722900 569.708496,550.315796
                        C561.456726,557.632812 551.869202,563.172058 543.508728,570.317322
                        C513.089172,596.315369 493.392822,629.060913 482.089539,667.242920
                        C476.830994,685.006042 475.322998,703.530640 470.283356,721.317139
                        C461.159454,753.518433 443.516724,779.421021 414.849457,797.399597
                        C403.880005,804.279053 392.010651,808.169861 379.176239,809.174011
                        C366.929321,810.132202 358.622070,804.958374 354.082794,792.917908
                        C348.306366,777.596008 345.126099,761.667297 343.546967,745.341370
                        C340.721375,716.128845 345.149719,687.954895 354.837158,660.460632
                        C365.966370,628.874573 384.251038,601.990723 408.617950,579.150635
                        C415.182159,572.997742 421.809662,566.912537 429.256287,561.227173
                      z"/>
                      <path fill="currentColor" opacity="1.000000" stroke="none"
                        d="
                      M511.177368,703.314331
                        C515.394043,686.985413 516.916565,670.515381 521.621338,654.687317
                        C532.130371,619.332336 553.183777,592.714539 586.161865,575.823059
                        C596.216248,570.673218 607.054688,569.015015 618.168213,569.838867
                        C627.503540,570.530884 633.084717,576.511597 636.446228,584.804443
                        C640.844543,595.655090 643.283691,607.042358 645.290466,618.514343
                        C655.893372,679.126343 638.665100,732.656982 600.946289,779.418152
                        C571.275818,816.201599 534.086731,843.391479 486.646973,853.709167
                        C469.498810,857.438660 452.176453,859.489685 434.648468,856.322815
                        C430.368927,855.549561 426.269989,854.145813 422.458893,852.014099
                        C414.606171,847.621704 412.831909,841.300354 417.549225,833.616150
                        C421.468597,827.231628 427.267822,822.634033 433.422241,818.624084
                        C454.760712,804.720581 471.437439,786.341309 485.100311,765.090210
                        C497.280243,746.145630 505.618164,725.528381 511.177368,703.314331
                      z"/>
                      <path fill="currentColor" opacity="1.000000" stroke="none"
                        d="
                      M631.557983,313.421814
                        C644.336609,321.929260 658.298889,327.735809 670.373352,336.746887
                        C692.073792,352.941650 706.289978,373.885803 711.783386,400.580780
                        C713.883240,410.785339 713.123718,420.778290 710.025330,430.613434
                        C707.495422,438.644165 700.900330,443.089966 691.691711,443.338440
                        C658.178162,444.242767 627.536682,435.113953 599.778259,416.501251
                        C555.835632,387.036591 531.923157,344.746246 522.711060,293.593567
                        C517.753357,266.064636 520.823425,239.241394 533.448914,213.903992
                        C536.267456,208.247681 539.517151,202.650146 546.890015,202.976822
                        C554.839172,203.329041 558.153992,209.225067 560.257690,215.909256
                        C564.406311,229.090408 568.629272,242.194626 575.446655,254.360031
                        C589.100281,278.724548 608.024231,297.989716 631.557983,313.421814
                      z"/>
                      <path fill="currentColor" opacity="1.000000" stroke="none"
                        d="
                      M640.996155,285.114258
                        C621.824280,274.227997 605.734375,260.616699 594.823364,241.513565
                        C587.524414,228.734482 583.295288,214.902039 582.021606,200.372620
                        C581.340637,192.604568 583.188232,184.779404 586.682312,177.638718
                        C589.495117,171.890366 594.596863,169.199982 600.775635,168.699310
                        C620.147888,167.129471 638.885498,170.684265 657.231567,176.427567
                        C690.203369,186.749496 715.842224,207.282166 736.648315,234.352112
                        C757.741272,261.795319 770.358154,292.819672 773.942383,327.138641
                        C776.084412,347.648895 773.744141,368.017242 766.526245,387.582489
                        C764.080627,394.211884 760.896851,400.404449 755.602783,405.254272
                        C749.934631,410.446716 743.996704,409.872681 739.333679,403.767426
                        C735.827271,399.176605 733.956787,393.817871 732.417419,388.365540
                        C720.597534,346.501099 694.013184,316.418579 657.435303,294.324005
                        C652.166626,291.141510 646.694580,288.295746 640.996155,285.114258
                      z"/>
                      <path fill="currentColor" opacity="1.000000" stroke="none"
                        d="
                      M281.708282,307.752563
                        C294.213287,292.530914 308.733276,280.632355 327.306091,274.301605
                        C329.345001,273.606659 331.445251,272.989746 333.567322,272.658417
                        C342.370026,271.283936 347.579407,277.731506 344.489136,286.156372
                        C343.746521,288.180939 342.844086,290.178101 341.765472,292.043518
                        C322.175720,325.923889 320.990662,361.399445 332.007202,398.165131
                        C339.392853,422.813507 338.527039,446.824066 324.489807,469.336365
                        C320.543518,475.665222 315.530060,480.885895 309.174683,484.836121
                        C300.349060,490.321838 294.074585,489.780090 286.793732,482.369781
                        C274.727814,470.089325 265.468689,455.968353 259.585815,439.722656
                        C246.979965,404.911224 249.328491,370.794891 264.209930,337.197205
                        C268.827057,326.773132 274.547455,317.055054 281.708282,307.752563
                      z"/>
                      <path fill="currentColor" opacity="1.000000" stroke="none"
                        d="
                      M397.392090,292.624573
                        C419.118225,317.528076 430.181000,346.135773 429.128967,378.881073
                        C428.022308,413.326508 416.617065,444.144135 393.444244,469.913635
                        C381.990387,482.651031 368.365448,492.875488 351.411591,497.510986
                        C346.618896,498.821350 341.057129,500.126282 337.360229,495.695709
                        C333.562286,491.144012 335.506317,485.681488 337.947479,481.109863
                        C343.997833,469.779053 349.772736,458.415466 352.669647,445.754608
                        C358.116180,421.950409 356.368378,398.528290 349.429108,375.330902
                        C343.983093,357.125397 342.009521,338.737793 347.926514,320.345825
                        C352.154480,307.203827 358.203552,294.925507 370.457886,287.140167
                        C380.927979,280.488373 386.350342,281.262756 395.097107,290.177948
                        C395.796875,290.891205 396.466248,291.634338 397.392090,292.624573
                      z"/>
                    </svg>
                  </div>) : null
                }
              </div>
              <div className="flex items-center justify-between">
                <span className="text-base text-cyan-700">{calculateBulkServingCost(cartState.items)}</span>
                <button onClick={() => setCartState({
                  ...cartState,
                  isOpen: true
                })} className="rounded text-base text-cyan-50 text-center py-1 px-2 bg-cyan-700 font-accent hover:text-white hover:bg-cyan-800">Review</button>
              </div>
            </div>
          </div> : null
        }
        <div className={`relative ${cartState.isOpen ? 'z-50' : '-z-10'}`} aria-labelledby="slide-over-title" role="dialog" aria-modal="true">
          { cartState.isOpen ? <div className="fixed inset-0 bg-gray-500 bg-opacity-75"></div> : null }
          <div className="fixed inset-0 overflow-hidden">
            <div className="absolute inset-0 overflow-hidden">
              <div className="pointer-events-none fixed inset-y-0 right-0 flex max-w-full pl-10">
                <div className={`pointer-events-auto w-screen max-w-md transform transition-all ease-in-out duration-500 sm:duration-700 ${cartState.isOpen ? 'translate-x-0' : 'translate-x-full'}`}>
                  <div className="flex h-full flex-col overflow-y-hidden bg-white shadow-xl">
                    <div className="bg-cyan-900 px-4 py-6 sm:px-6">
                      <div className="flex items-center justify-between">
                        <h2 className="text-xl font-accent text-cyan-50" id="slide-over-title">Subscribe & Save</h2>
                        <div className="ml-3 flex h-7 items-center">
                          <button onClick={() => setCartState({ ...cartState, isOpen: false })} type="button" className="relative rounded-md bg-cyan-900 text-cyan-200 hover:text-white focus:outline-none focus:ring-2 focus:ring-white">
                            <span className="absolute -inset-2.5"></span>
                            <span className="sr-only">Close panel</span>
                            <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor" aria-hidden="true">
                              <path strokeLinecap="round" strokeLinejoin="round" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                          </button>
                        </div>
                      </div>
                      <div className="mt-1">
                        <p className="text-sm text-cyan-300">Join the movement! Enjoy a shipment of your favorite coffee with discounts, bonus gear, and more.</p>
                      </div>
                    </div>
                    <div className="relative flex-1 px-4 py-6 sm:px-6">
                      <div
                        className={`transition-opacity absolute inset-0 ${cartState.displayComponent === 'landing' ? 'z-10 opacity-100' : 'opacity-0'}`}
                      >
                        <div className="flex justify-center pt-16">
                          <svg xmlns="http://www.w3.org/2000/svg" width="213" height="150" viewBox="0 0 213 150" fill="none">
                            <g clipPath="url(#clip0_239_172)">
                              <path d="M23.707 119.998C19.1427 119.998 14.7285 118.367 11.2596 115.401C10.1024 114.41 8.86945 112.688 7.59502 110.283C6.78174 108.734 6.32621 107.022 6.26197 105.273C6.19773 103.524 6.5264 101.783 7.2238 100.178C6.55156 100.862 5.80801 101.472 5.00588 101.998L4.6004 102.267L4.57697 101.781C4.5616 101.465 4.55381 101.15 4.55381 100.845C4.55381 99.0451 5.91481 97.2191 5.28713 95.5559C2.64162 88.5456 -5.74928 81.5788 6.41169 70.7295C7.53665 69.7258 6.03388 67.7192 6.03388 66.2007C6.03388 51.3194 22.2031 28.996 33.0274 39.2125C39.3456 45.1759 52.5092 49.4123 58.6553 57.7072L58.7367 57.9529L58.4968 58.05C57.2688 58.566 55.9754 58.9101 54.6533 59.0722C56.0628 59.3597 57.5013 59.4802 58.939 59.4313L59.1619 59.4235L59.2162 59.6402C59.751 61.786 60.0213 63.9892 60.021 66.2007L60.02 66.4398C60.015 68.1195 60.3641 69.7815 61.0445 71.3172C61.7249 72.853 62.7213 74.2282 63.9688 75.353C65.9394 77.1497 67.5139 79.3371 68.5922 81.776C69.6705 84.2149 70.2289 86.8517 70.2317 89.5183C70.2317 92.6731 68.0875 96.8143 66.2887 99.7329C65.8328 100.476 65.2145 101.107 64.4802 101.577C63.7458 102.048 62.9145 102.346 62.0485 102.449C61.2283 102.552 60.3954 102.474 59.6087 102.22C58.8221 101.966 58.1008 101.542 57.4962 100.978C58.3476 102.69 59.4571 104.261 60.7858 105.636L61.0312 105.888L60.7265 106.066C57.7981 107.774 54.4687 108.673 51.0788 108.671L50.8802 108.671C45.7337 108.671 40.8485 110.665 37.4775 114.141C35.6877 115.985 33.5477 117.453 31.183 118.459C28.8183 119.464 26.2766 119.987 23.707 119.998Z" fill="#E6E6E6"/>
                              <path d="M16.9529 150C16.8701 150 16.79 149.97 16.7275 149.916C16.6649 149.861 16.624 149.786 16.6124 149.704C16.5977 149.601 15.1643 139.264 16.4517 125.524C17.6406 112.836 21.4585 94.5597 32.8955 79.5499C32.9229 79.5138 32.9571 79.4835 32.9962 79.4607C33.0353 79.4379 33.0786 79.423 33.1234 79.4169C33.1683 79.4109 33.2139 79.4137 33.2577 79.4252C33.3015 79.4368 33.3425 79.4569 33.3785 79.4843C33.4146 79.5117 33.4448 79.546 33.4676 79.5852C33.4903 79.6243 33.5051 79.6675 33.5112 79.7124C33.5172 79.7573 33.5143 79.8029 33.5027 79.8467C33.4911 79.8904 33.471 79.9315 33.4435 79.9674C22.1052 94.8476 18.3181 112.989 17.1376 125.588C15.8577 139.248 17.2799 149.505 17.2944 149.607C17.3013 149.656 17.2976 149.706 17.2837 149.753C17.2697 149.8 17.2457 149.844 17.2133 149.881C17.1809 149.919 17.1409 149.948 17.096 149.969C17.0511 149.989 17.0023 150 16.9529 150Z" fill="#3F3D56"/>
                              <path d="M27.3959 100.342C27.3231 100.342 27.2522 100.319 27.1933 100.276C27.1344 100.234 27.0906 100.173 27.0681 100.104C27.0455 100.035 27.0455 99.9606 27.068 99.8914C27.0904 99.8222 27.1342 99.7618 27.1931 99.7191C30.452 97.5132 33.9725 95.721 37.6736 94.3839C43.4559 92.267 52.2487 90.3478 61.3008 93.2288C61.3438 93.2425 61.3838 93.2646 61.4184 93.2937C61.453 93.3229 61.4815 93.3586 61.5022 93.3988C61.523 93.4389 61.5357 93.4828 61.5395 93.5279C61.5433 93.5729 61.5382 93.6183 61.5245 93.6614C61.5108 93.7045 61.4887 93.7445 61.4596 93.7791C61.4304 93.8136 61.3947 93.8421 61.3545 93.8629C61.3143 93.8837 61.2705 93.8963 61.2254 93.9002C61.1803 93.904 61.135 93.8989 61.0919 93.8852C52.2253 91.0634 43.5918 92.9508 37.9105 95.0309C34.2688 96.3451 30.8048 98.1071 27.5981 100.276C27.5393 100.319 27.4685 100.342 27.3959 100.342Z" fill="#3F3D56"/>
                              <path d="M165.948 119.998C161.384 119.998 156.969 118.368 153.501 115.401C152.343 114.411 151.11 112.688 149.836 110.283C149.023 108.734 148.567 107.022 148.503 105.273C148.439 103.524 148.767 101.783 149.465 100.179C148.793 100.862 148.049 101.472 147.247 101.998L146.841 102.268L146.818 101.781C146.803 101.465 146.795 101.15 146.795 100.845C146.795 99.0451 148.156 97.2192 147.528 95.5559C144.883 88.5457 136.492 81.5789 148.653 70.7295C149.778 69.7259 148.275 67.7193 148.275 66.2008C148.275 51.3194 169.307 25.5741 175.268 39.2125C182.62 56.0322 195.285 54.2331 200.896 57.7072L200.978 57.953L200.738 58.05C199.51 58.5661 198.216 58.9101 196.894 59.0723C198.304 59.3597 199.742 59.4802 201.18 59.4313L201.403 59.4235L201.457 59.6402C201.992 61.7861 202.262 63.9893 202.262 66.2008L202.261 66.4398C202.256 68.1196 202.605 69.7815 203.285 71.3173C203.966 72.8531 204.962 74.2282 206.21 75.3531C208.18 77.1497 209.755 79.3372 210.833 81.7761C211.911 84.2149 212.47 86.8517 212.473 89.5183C212.473 92.6731 210.328 96.8144 208.53 99.7329C208.074 100.476 207.455 101.107 206.721 101.577C205.987 102.048 205.155 102.346 204.29 102.449C203.469 102.552 202.636 102.474 201.85 102.22C201.063 101.966 200.342 101.542 199.737 100.978C200.589 102.69 201.698 104.261 203.027 105.636L203.272 105.889L202.967 106.066C200.039 107.774 196.71 108.673 193.32 108.672L193.121 108.671C187.975 108.671 183.09 110.665 179.718 114.141C177.929 115.985 175.789 117.453 173.424 118.459C171.059 119.464 168.518 119.987 165.948 119.998Z" fill="#E6E6E6"/>
                              <path d="M159.194 150C159.111 150 159.031 149.97 158.968 149.916C158.906 149.861 158.865 149.786 158.853 149.704C158.839 149.601 157.405 139.264 158.693 125.524C159.882 112.836 163.699 94.5597 175.136 79.5499C175.164 79.5138 175.198 79.4835 175.237 79.4607C175.276 79.4379 175.32 79.423 175.364 79.4169C175.409 79.4109 175.455 79.4137 175.499 79.4252C175.542 79.4368 175.584 79.4569 175.62 79.4843C175.656 79.5117 175.686 79.546 175.709 79.5852C175.731 79.6243 175.746 79.6675 175.752 79.7124C175.758 79.7573 175.755 79.8029 175.744 79.8467C175.732 79.8904 175.712 79.9315 175.684 79.9674C164.346 94.8476 160.559 112.989 159.379 125.588C158.099 139.248 159.521 149.505 159.535 149.607C159.542 149.656 159.539 149.706 159.525 149.753C159.511 149.8 159.487 149.844 159.454 149.881C159.422 149.919 159.382 149.948 159.337 149.969C159.292 149.989 159.243 150 159.194 150Z" fill="#3F3D56"/>
                              <path d="M168.692 101.051C168.619 101.051 168.548 101.028 168.489 100.985C168.43 100.943 168.387 100.882 168.364 100.813C168.342 100.744 168.342 100.669 168.364 100.6C168.386 100.531 168.43 100.471 168.489 100.428C171.748 98.222 175.268 96.4299 178.97 95.0928C184.752 92.9758 193.545 91.0567 202.597 93.9376C202.64 93.9514 202.68 93.9734 202.714 94.0026C202.749 94.0318 202.777 94.0675 202.798 94.1076C202.819 94.1478 202.832 94.1917 202.836 94.2367C202.839 94.2818 202.834 94.3272 202.821 94.3703C202.807 94.4134 202.785 94.4534 202.756 94.4879C202.726 94.5225 202.691 94.551 202.651 94.5718C202.61 94.5925 202.566 94.6052 202.521 94.609C202.476 94.6128 202.431 94.6078 202.388 94.594C193.521 91.7723 184.888 93.6597 179.206 95.7397C175.565 97.0539 172.101 98.8159 168.894 100.985C168.835 101.028 168.765 101.051 168.692 101.051Z" fill="#3F3D56"/>
                              <path d="M152.927 61.7869C152.922 61.7143 152.939 61.6419 152.978 61.5801C153.016 61.5183 153.073 61.4702 153.141 61.4428C153.208 61.4154 153.282 61.41 153.353 61.4274C153.424 61.4448 153.487 61.4841 153.534 61.5398C155.969 64.6313 158.01 68.0136 159.61 71.6088C162.138 77.2237 164.685 85.8554 162.463 95.0915C162.453 95.1355 162.434 95.177 162.407 95.2136C162.381 95.2502 162.347 95.2812 162.309 95.3049C162.27 95.3285 162.227 95.3443 162.182 95.3514C162.138 95.3584 162.092 95.3566 162.048 95.3461C162.004 95.3355 161.963 95.3163 161.926 95.2897C161.889 95.2631 161.858 95.2295 161.835 95.1909C161.811 95.1523 161.795 95.1094 161.788 95.0647C161.781 95.02 161.783 94.9744 161.794 94.9304C163.97 85.8836 161.465 77.4085 158.982 71.8917C157.409 68.3542 155.402 65.026 153.007 61.9838C152.96 61.9283 152.932 61.8594 152.927 61.7869Z" fill="#3F3D56"/>
                              <path d="M11.3948 59.6603C11.3895 59.5877 11.4074 59.5153 11.4457 59.4535C11.4841 59.3917 11.5411 59.3436 11.6085 59.3162C11.6758 59.2888 11.7502 59.2834 11.8208 59.3008C11.8915 59.3182 11.9548 59.3575 12.0017 59.4132C14.4365 62.5047 16.4776 65.887 18.0777 69.4823C20.6056 75.0971 23.153 83.7289 20.9314 92.9649C20.9208 93.0089 20.9017 93.0504 20.8751 93.087C20.8485 93.1236 20.815 93.1546 20.7764 93.1783C20.7378 93.2019 20.695 93.2177 20.6503 93.2248C20.6056 93.2319 20.5599 93.23 20.5159 93.2195C20.4719 93.2089 20.4304 93.1897 20.3938 93.1631C20.3572 93.1365 20.3263 93.1029 20.3026 93.0643C20.279 93.0257 20.2633 92.9829 20.2562 92.9381C20.2492 92.8934 20.251 92.8478 20.2617 92.8038C22.4376 83.757 19.9333 75.2819 17.4495 69.7651C15.8765 66.2276 13.8696 62.8994 11.475 59.8572C11.4281 59.8018 11.4 59.7328 11.3948 59.6603Z" fill="#3F3D56"/>
                              <path d="M106.468 24.8396C106.057 24.4182 105.552 24.1009 104.993 23.914C104.435 23.7272 103.84 23.6761 103.259 23.7651C102.677 23.8541 102.124 24.0805 101.648 24.4257C101.171 24.7708 100.783 25.2247 100.517 25.7497C94.9127 29.6501 91.3596 34.8764 90.0191 41.5328L80.0767 32.5121C80.1933 31.7575 80.068 30.9853 79.7186 30.3064C79.3692 29.6274 78.8138 29.0766 78.132 28.7328C77.4502 28.389 76.6771 28.27 75.9234 28.3928C75.1698 28.5156 74.4744 28.874 73.9371 29.4164C73.3997 29.9588 73.0479 30.6575 72.9322 31.4123C72.8164 32.167 72.9427 32.939 73.2928 33.6176C73.6429 34.2961 74.199 34.8463 74.8812 35.1893C75.5633 35.5323 76.3366 35.6505 77.0901 35.5268C78.9153 38.625 87.3812 52.3256 92.6064 49.1889C96.9983 46.5523 104.798 33.4891 107.09 29.1566C107.456 28.4639 107.594 27.6727 107.482 26.8969C107.37 26.121 107.015 25.4007 106.468 24.8396Z" fill="#FFB6B6"/>
                              <path d="M106.786 30.822C107.285 29.4688 107.685 27.9771 107.252 26.6012C106.776 25.0881 105.313 24.0046 103.749 23.7411C102.185 23.4775 100.559 23.9492 99.2143 24.7903C97.8694 25.6314 96.7756 26.8194 95.8039 28.0732L96.0641 27.6589C94.799 29.3163 93.534 30.9737 92.2689 32.6311C95.4798 34.8619 98.6908 37.0927 101.902 39.3234C103.994 36.7832 105.646 33.9093 106.786 30.822Z" fill="#66CDD9"/>
                              <path d="M92.9379 144.986L88.339 144.985L86.151 127.245L92.9389 127.246L92.9379 144.986Z" fill="#FFB6B6"/>
                              <path d="M93.1001 149.783L78.957 149.783V149.604C78.9571 148.144 79.5372 146.744 80.5695 145.712C81.6018 144.679 83.002 144.099 84.4619 144.099H84.4622L87.0456 142.139L91.8657 144.1L93.1003 144.1L93.1001 149.783Z" fill="#2F2E41"/>
                              <path d="M160.402 79.6715L162.333 83.8456L147.151 93.2794L144.301 87.1184L160.402 79.6715Z" fill="#FFB6B6"/>
                              <path d="M164.689 77.5101L170.626 90.3465L170.464 90.4216C169.139 91.0344 167.624 91.0958 166.254 90.5923C164.884 90.0887 163.77 89.0615 163.156 87.7365L163.156 87.7362L160.293 86.2143L160.048 81.0167L159.53 79.8962L164.689 77.5101Z" fill="#2F2E41"/>
                              <path d="M58.6058 8.90901C59.5503 8.62552 60.1561 7.86308 59.9588 7.20605C59.7616 6.54903 58.8361 6.24622 57.8916 6.52972C56.9472 6.81321 56.3414 7.57566 56.5386 8.23268C56.7358 8.8897 57.6613 9.19251 58.6058 8.90901Z" fill="#E6E6E6"/>
                              <path d="M70.2647 8.32728C71.2092 8.04378 71.815 7.28135 71.6178 6.62432C71.4206 5.9673 70.495 5.6645 69.5506 5.94799C68.6061 6.23149 68.0003 6.99393 68.1975 7.65095C68.3948 8.30797 69.3203 8.61077 70.2647 8.32728Z" fill="#3F3D56"/>
                              <path d="M56.8372 18.6796C57.7817 18.3961 58.3875 17.6336 58.1903 16.9766C57.9931 16.3196 57.0675 16.0168 56.1231 16.3003C55.1786 16.5838 54.5728 17.3462 54.7701 18.0032C54.9673 18.6603 55.8928 18.9631 56.8372 18.6796Z" fill="#FF6584"/>
                              <path d="M53.1597 22.7638C53.5881 22.697 53.8575 22.1437 53.7615 21.5279C53.6655 20.9121 53.2404 20.4671 52.812 20.5339C52.3836 20.6007 52.1142 21.154 52.2102 21.7698C52.3063 22.3856 52.7313 22.8306 53.1597 22.7638Z" fill="#E6E6E6"/>
                              <path d="M52.5181 30.1135C52.9465 30.0467 53.2159 29.4934 53.1199 28.8776C53.0239 28.2618 52.5988 27.8168 52.1704 27.8836C51.742 27.9504 51.4726 28.5037 51.5686 29.1195C51.6646 29.7353 52.0897 30.1803 52.5181 30.1135Z" fill="#3F3D56"/>
                              <path d="M63.8362 15.6685C64.2646 15.6017 64.534 15.0484 64.438 14.4326C64.342 13.8168 63.9169 13.3718 63.4885 13.4386C63.0601 13.5054 62.7907 14.0587 62.8867 14.6745C62.9828 15.2902 63.4079 15.7353 63.8362 15.6685Z" fill="#E6E6E6"/>
                              <path d="M57.8715 13.7188C58.2999 13.652 58.5693 13.0987 58.4733 12.4829C58.3773 11.8671 57.9522 11.4221 57.5238 11.4889C57.0954 11.5557 56.826 12.109 56.922 12.7248C57.018 13.3405 57.4431 13.7856 57.8715 13.7188Z" fill="#FF6584"/>
                              <path d="M64.8431 7.4479C65.2714 7.38111 65.5408 6.82777 65.4448 6.212C65.3488 5.59622 64.9237 5.15119 64.4953 5.21799C64.067 5.28478 63.7976 5.83811 63.8936 6.45389C63.9896 7.06966 64.4147 7.5147 64.8431 7.4479Z" fill="#3F3D56"/>
                              <path d="M130.075 124.725C131.051 124.583 131.762 123.918 131.664 123.239C131.565 122.56 130.694 122.125 129.718 122.267C128.742 122.409 128.031 123.074 128.13 123.753C128.229 124.432 129.1 124.867 130.075 124.725Z" fill="#E6E6E6"/>
                              <path d="M118.457 123.591C119.433 123.449 120.144 122.784 120.045 122.105C119.947 121.426 119.075 120.991 118.1 121.133C117.124 121.275 116.413 121.94 116.512 122.619C116.61 123.298 117.481 123.733 118.457 123.591Z" fill="#3F3D56"/>
                              <path d="M133.257 115.319C134.233 115.177 134.944 114.512 134.845 113.833C134.746 113.154 133.875 112.719 132.899 112.861C131.924 113.003 131.213 113.668 131.311 114.347C131.41 115.026 132.281 115.461 133.257 115.319Z" fill="#FF6584"/>
                              <path d="M137.153 111.617C137.587 111.613 137.934 111.106 137.93 110.482C137.925 109.859 137.57 109.357 137.136 109.36C136.703 109.363 136.355 109.871 136.36 110.494C136.364 111.118 136.72 111.62 137.153 111.617Z" fill="#E6E6E6"/>
                              <path d="M138.865 104.441C139.299 104.437 139.646 103.929 139.642 103.306C139.637 102.683 139.282 102.18 138.848 102.184C138.415 102.187 138.067 102.695 138.072 103.318C138.076 103.941 138.432 104.444 138.865 104.441Z" fill="#3F3D56"/>
                              <path d="M125.552 117.07C125.986 117.067 126.333 116.559 126.328 115.936C126.324 115.313 125.968 114.81 125.535 114.813C125.101 114.817 124.754 115.325 124.759 115.948C124.763 116.571 125.119 117.073 125.552 117.07Z" fill="#E6E6E6"/>
                              <path d="M131.166 119.873C131.6 119.87 131.947 119.362 131.942 118.739C131.938 118.116 131.583 117.613 131.149 117.617C130.715 117.62 130.368 118.128 130.373 118.751C130.377 119.374 130.733 119.877 131.166 119.873Z" fill="#FF6584"/>
                              <path d="M123.351 125.055C123.784 125.051 124.132 124.543 124.127 123.92C124.123 123.297 123.767 122.794 123.334 122.798C122.9 122.801 122.553 123.309 122.557 123.932C122.562 124.555 122.917 125.058 123.351 125.055Z" fill="#3F3D56"/>
                              <path d="M100.171 64.8014L97.376 68.2244C97.4395 69.1515 97.1474 69.6812 96.2793 69.5674C96.2793 69.5674 96.4089 71.2648 95.3453 70.7113C94.2817 70.1577 94.5425 71.6944 94.5425 71.6944L93.7477 72.6677C93.7477 72.6677 93.7229 74.323 92.939 73.658C92.1552 72.9931 91.9037 74.9258 91.9037 74.9258L90.9063 76.1474L80.7372 88.6007L86.4377 134.372L93.1003 133.954L94.7243 93.8271C95.1385 92.7207 95.7673 92.1411 96.7285 92.3779C97.1591 92.4722 97.4109 92.2133 97.5693 91.7699L98.3353 91.216L108.361 83.9659L121.605 106.663L154.533 89.2965L151.462 83.3895L128.361 91.0321L127.755 83.8051C126.966 83.3455 127.099 82.7962 127.621 82.2089L127.47 80.4056C128.253 79.925 127.865 79.1631 127.299 78.3585C126.116 77.4849 126.232 76.4898 127.053 75.4288C127.053 75.4288 128.091 61.854 123.06 59.9809C118.03 58.1078 100.171 64.8014 100.171 64.8014Z" fill="#2F2E41"/>
                              <path d="M110.046 20.2432L103.733 20.5388L100.425 25.2644C98.122 30.331 97.4897 35.9987 98.6195 41.4483L100.898 52.4367L100.294 60.585C98.6768 61.8896 98.5423 63.4234 99.9524 65.1959C98.2164 71.1855 112.988 68.4898 126.652 66.3773C126.699 63.5235 125.96 60.6177 124.053 57.6349L125.892 33.828L119.091 25.737L113.886 22.3092L110.046 20.2432Z" fill="#66CDD9"/>
                              <path d="M115.954 26.7728C115.45 27.0755 115.024 27.4941 114.713 27.9941C114.403 28.494 114.216 29.0609 114.168 29.6476C114.12 30.2343 114.213 30.8239 114.439 31.3675C114.665 31.9111 115.017 32.3931 115.466 32.7733C116.228 37.7153 120.959 42.4761 128.399 46.6313L117.327 54.2226C116.62 53.9349 115.84 53.8786 115.098 54.0618C114.357 54.245 113.693 54.6583 113.201 55.2423C112.709 55.8263 112.415 56.5511 112.36 57.3127C112.306 58.0743 112.494 58.8336 112.898 59.4817C113.301 60.1298 113.9 60.6334 114.608 60.9202C115.315 61.2071 116.096 61.2625 116.837 61.0785C117.578 60.8944 118.241 60.4804 118.733 59.8959C119.224 59.3113 119.517 58.5862 119.571 57.8245C123.007 56.7639 138.292 51.6895 136.446 45.8813C134.895 40.9993 123.985 30.3946 120.298 27.1648C119.709 26.648 118.971 26.3316 118.19 26.2612C117.41 26.1908 116.627 26.3699 115.954 26.7728Z" fill="#FFB6B6"/>
                              <path d="M103.913 48.9113C103.177 48.91 102.469 48.6316 101.929 48.1315C101.389 47.6314 101.057 46.9462 100.999 46.2125L100.607 41.2139C100.547 40.4399 100.796 39.6734 101.3 39.0832C101.805 38.4929 102.523 38.1272 103.297 38.0665L113.007 37.305C113.781 37.2444 114.547 37.4937 115.137 37.9981C115.728 38.5025 116.093 39.2207 116.154 39.9947L116.546 44.9933C116.607 45.7673 116.357 46.5338 115.853 47.124C115.349 47.7143 114.63 48.08 113.856 48.1407L104.147 48.9022C104.068 48.9083 103.991 48.9113 103.913 48.9113Z" fill="#F2F2F2"/>
                              <path d="M105.311 19.0448C109.876 19.0448 113.577 15.3439 113.577 10.7787C113.577 6.21343 109.876 2.51257 105.311 2.51257C100.745 2.51257 97.0444 6.21343 97.0444 10.7787C97.0444 15.3439 100.745 19.0448 105.311 19.0448Z" fill="#FFB6B6"/>
                              <path d="M113.899 5.51806C113.507 5.00958 113.059 4.54258 112.718 3.9988C112.39 3.47526 112.165 2.88759 111.795 2.39275C110.7 0.929187 108.665 0.6299 106.846 0.447625C105.645 0.32728 104.444 0.206931 103.243 0.086574C102.568 -0.00896274 101.884 -0.0213168 101.207 0.0497958C100.562 0.149958 99.9487 0.398069 99.4157 0.774693C98.8827 1.15132 98.4441 1.64623 98.1344 2.22065C97.7825 2.88642 97.5474 3.71617 96.8614 4.02669C96.5381 4.12864 96.2089 4.2105 95.8755 4.27181C95.5513 4.37234 95.2255 4.63131 95.2376 4.97046C95.26 5.59847 96.3681 5.95794 96.0978 6.52523C95.859 7.0262 94.903 6.67074 94.7673 7.42701C94.749 7.53615 94.7537 7.64792 94.781 7.75516C94.8084 7.86239 94.8578 7.96274 94.9262 8.04976C95.2345 8.4447 95.7405 8.54734 96.2147 8.63449L95.3725 9.83902C98.0995 10.9596 101.135 11.0774 103.941 10.1717C104.36 10.0329 104.807 10.0014 105.241 10.0803C105.675 10.1592 106.083 10.3457 106.426 10.623C106.769 10.9002 107.038 11.2591 107.206 11.6669C107.375 12.0748 107.438 12.5183 107.391 12.957L107.387 12.9913C107.368 13.1235 107.386 13.2583 107.439 13.3812C107.491 13.5041 107.575 13.6105 107.683 13.6892C108.111 13.9796 108.545 13.5721 108.739 13.1689C108.936 12.7587 109.067 12.2611 109.544 12.1174C109.738 12.0683 109.944 12.0837 110.129 12.1612C110.314 12.2388 110.469 12.3743 110.57 12.5475C110.941 13.1297 110.789 13.8245 110.576 14.4406C110.082 15.8624 109.28 17.1575 108.228 18.2335C110.023 18.1148 109.498 18.2948 111.294 18.176L111.795 18.2539C112.996 17.5042 113.592 16.0777 113.909 14.6972C114.628 11.5655 115.86 8.0634 113.899 5.51806Z" fill="#2F2E41"/>
                              <path d="M120.908 26.0962C119.714 25.2864 118.362 24.5397 116.923 24.6294C115.339 24.7281 113.936 25.8878 113.305 27.3429C112.673 28.798 112.74 30.4894 113.234 31.997C113.727 33.5046 114.617 34.8518 115.601 36.0963L115.261 35.7441C116.566 37.3703 117.871 38.9965 119.176 40.6227C122.113 38.0418 125.05 35.4609 127.987 32.88C126.024 30.2382 123.631 27.945 120.908 26.0962Z" fill="#66CDD9"/>
                              <path d="M105.081 149.349L105.085 149.184C105.16 146.422 105.835 143.71 107.063 141.236C108.292 138.761 110.045 136.584 112.2 134.855C113.416 133.895 114.749 133.092 116.166 132.465L116.301 132.405L116.324 132.551C116.599 134.295 117.033 136.075 117.236 136.865L118.593 131.569L118.744 131.525C119.436 131.322 120.172 131.331 120.859 131.55C121.545 131.77 122.15 132.189 122.596 132.756C123.061 133.322 123.346 134.015 123.414 134.745C123.482 135.475 123.33 136.208 122.977 136.851C122.661 137.44 122.35 138.055 122.049 138.65C121.015 140.694 119.947 142.807 118.389 144.449C117.199 145.68 115.748 146.63 114.143 147.228C112.538 147.827 110.82 148.06 109.113 147.909L105.081 149.349Z" fill="#F2F2F2"/>
                              <path d="M124.26 149.827L60.0505 149.899C60.0136 149.899 59.977 149.892 59.9428 149.878C59.9087 149.864 59.8777 149.843 59.8516 149.817C59.8254 149.791 59.8047 149.76 59.7906 149.726C59.7764 149.692 59.7692 149.655 59.7692 149.618C59.7692 149.581 59.7764 149.544 59.7906 149.51C59.8047 149.476 59.8254 149.445 59.8516 149.419C59.8777 149.393 59.9087 149.372 59.9428 149.358C59.977 149.344 60.0136 149.337 60.0505 149.337L124.26 149.264C124.334 149.264 124.406 149.294 124.459 149.346C124.511 149.399 124.541 149.471 124.541 149.545C124.541 149.62 124.511 149.692 124.459 149.744C124.406 149.797 124.334 149.827 124.26 149.827Z" fill="#CACACA"/>
                              <path d="M184.275 149.827L147.238 149.899C147.201 149.899 147.165 149.892 147.13 149.878C147.096 149.864 147.065 149.843 147.039 149.817C147.013 149.791 146.992 149.76 146.978 149.726C146.964 149.692 146.957 149.655 146.957 149.618C146.957 149.581 146.964 149.544 146.978 149.51C146.992 149.476 147.013 149.445 147.039 149.419C147.065 149.393 147.096 149.372 147.13 149.358C147.165 149.344 147.201 149.337 147.238 149.337L184.275 149.264C184.35 149.264 184.421 149.294 184.474 149.346C184.527 149.399 184.556 149.471 184.556 149.545C184.556 149.62 184.527 149.692 184.474 149.744C184.421 149.797 184.35 149.827 184.275 149.827Z" fill="#CACACA"/>
                              <path d="M37.0722 149.827L2.39804 149.899C2.36109 149.899 2.32451 149.892 2.29037 149.878C2.25624 149.864 2.22522 149.843 2.1991 149.817C2.17298 149.791 2.15225 149.76 2.13812 149.726C2.12398 149.692 2.1167 149.655 2.1167 149.618C2.1167 149.581 2.12398 149.544 2.13812 149.51C2.15225 149.476 2.17298 149.445 2.1991 149.419C2.22522 149.393 2.25624 149.372 2.29037 149.358C2.32451 149.344 2.36109 149.337 2.39804 149.337L37.0722 149.264C37.1093 149.264 37.1459 149.271 37.1802 149.285C37.2144 149.299 37.2455 149.32 37.2717 149.346C37.2979 149.372 37.3187 149.403 37.3329 149.438C37.3471 149.472 37.3544 149.508 37.3544 149.545C37.3544 149.582 37.3471 149.619 37.3329 149.653C37.3187 149.687 37.2979 149.718 37.2717 149.745C37.2455 149.771 37.2144 149.791 37.1802 149.806C37.1459 149.82 37.1093 149.827 37.0722 149.827Z" fill="#CACACA"/>
                              <path d="M74.6287 23.6915C74.4924 23.6915 74.3576 23.7198 74.2328 23.7745C74.108 23.8292 73.9959 23.9092 73.9036 24.0094C73.8113 24.1096 73.7407 24.2279 73.6964 24.3568C73.6521 24.4856 73.635 24.6223 73.6461 24.7581C74.6531 29.5034 75.0959 34.0285 74.7549 38.2476C74.7764 38.4938 74.8891 38.723 75.0708 38.8905C75.2526 39.0579 75.4903 39.1514 75.7374 39.1527H82.098C82.3451 39.1514 82.5828 39.0579 82.7646 38.8905C82.9464 38.723 83.059 38.4938 83.0806 38.2476C82.5667 33.9919 83.1101 29.4481 84.1893 24.7581C84.2004 24.6223 84.1833 24.4856 84.139 24.3568C84.0947 24.2279 84.0242 24.1096 83.9318 24.0094C83.8395 23.9092 83.7274 23.8292 83.6026 23.7745C83.4778 23.7198 83.343 23.6915 83.2067 23.6915H74.6287Z" fill="#66CDD9"/>
                              <path d="M84.6986 25.4894L84.2241 23.2353C84.1809 23.0303 84.0686 22.8464 83.9059 22.7144C83.7433 22.5825 83.5402 22.5104 83.3307 22.5104H80.3683C80.3567 22.4711 80.3378 22.4343 80.3127 22.4019L79.9835 21.9905C79.9525 21.9517 79.9131 21.9204 79.8684 21.8989C79.8236 21.8774 79.7746 21.8662 79.7249 21.8662H77.8958C77.8462 21.8662 77.7972 21.8774 77.7524 21.8989C77.7076 21.9204 77.6683 21.9517 77.6373 21.9905L77.3081 22.4019C77.2829 22.4343 77.264 22.4711 77.2525 22.5104H74.5048C74.2953 22.5104 74.0922 22.5825 73.9296 22.7144C73.7669 22.8464 73.6546 23.0303 73.6114 23.2353L73.1369 25.4894C73.1089 25.6223 73.1109 25.7599 73.1428 25.8919C73.1747 26.024 73.2357 26.1472 73.3213 26.2527C73.4069 26.3582 73.515 26.4433 73.6376 26.5017C73.7603 26.5601 73.8944 26.5904 74.0303 26.5904C77.1333 27.5737 80.3916 27.5737 83.8052 26.5904C83.9411 26.5904 84.0752 26.5601 84.1979 26.5017C84.3205 26.4433 84.4286 26.3582 84.5142 26.2527C84.5998 26.1472 84.6608 26.024 84.6927 25.8919C84.7246 25.7599 84.7266 25.6223 84.6986 25.4894Z" fill="#3F3D56"/>
                            </g>
                            <defs>
                              <clipPath id="clip0_239_172">
                                <rect width="212.473" height="150" fill="white"/>
                              </clipPath>
                            </defs>
                          </svg>
                        </div>
                        <div className="py-14 flex flex-col">
                          <h3 className="text-2xl md:text-3xl text-cyan-500 text-accent text-center">Welcome to the club</h3>
                          <h3 className="text-2xl md:text-3xl text-cyan-900 text-accent text-center">Fuel your passion</h3>
                        </div>
                        <p className="px-20 text-sm md:text-base text-center text-neutral-700">
                          take our optional quiz to see what coffee best suits you
                        </p>
                        <div className="flex flex-col space-y-4 py-14 items-center">
                          <button
                            onClick={() => setCartState({
                              ...cartState,
                              displayComponent: 'quiz'
                            })}
                            className="rounded text-base bg-cyan-50 text-center py-4 text-cyan-600 font-accent w-48"
                          >
                            Take Quiz
                          </button>
                          <div className="flex items-center space-x-3 w-48">
                            <div className="bg-neutral-100 h-px flex-1"></div>
                            <span className="text-neutral-300 text-base">or</span>
                            <div className="bg-neutral-100 h-px flex-1"></div>
                          </div>
                          <button
                            onClick={() => setCartState({
                              ...cartState,
                              displayComponent: 'cart'
                            })}
                            className="rounded text-base text-cyan-50 text-center py-4 bg-cyan-800 font-accent w-48"
                          >
                            Start Shopping
                          </button>
                        </div>
                      </div>
                      <div
                        className={`transition-opacity absolute inset-0 ${cartState.displayComponent === 'quiz' ? 'z-10 opacity-100' : 'opacity-0'}`}
                      >
                        <div className="p-4 flex flex-col space-y-12 h-[calc(100vh-89px-140px)] lg:h-[calc(100vh-89px-120px)] overflow-y-auto">
                          <div>
                            <h3 className="font-accent text-xl text-cyan-700">
                              1. How many cups of coffee does your household consume in a day?
                            </h3>
                            <div className="grid grid-cols-2 gap-4 mt-4">
                              <button
                                onClick={() => setCartState({
                                  ...cartState,
                                  quantity_pref: 1
                                })}
                                className={`rounded border shadow-md flex items-center space-x-2 p-2 text-base ${cartState.quantity_pref === 1 ? 'text-cyan-50 border-cyan-600 bg-cyan-800 font-medium' : 'text-neutral-600 border-neutral-50 bg-white'}`}
                              >
                                <span className="flex-1 text-left">1 cup</span>
                              </button>
                              <button
                                onClick={() => setCartState({
                                  ...cartState,
                                  quantity_pref: 2
                                })}
                                className={`rounded border shadow-md flex items-center space-x-2 p-2 text-base ${cartState.quantity_pref === 2 ? 'text-cyan-50 border-cyan-600 bg-cyan-800 font-medium' : 'text-neutral-600 border-neutral-50 bg-white'}`}
                              >
                                <span className="flex-1 text-left">2 cups</span>
                              </button>
                              <button
                                onClick={() => setCartState({
                                  ...cartState,
                                  quantity_pref: 3
                                })}
                                className={`rounded border shadow-md flex items-center space-x-2 p-2 text-base ${cartState.quantity_pref === 3 ? 'text-cyan-50 border-cyan-600 bg-cyan-800 font-medium' : 'text-neutral-600 border-neutral-50 bg-white'}`}
                              >
                                <span className="flex-1 text-left">3 cups</span>
                              </button>
                              <button
                                onClick={() => setCartState({
                                  ...cartState,
                                  quantity_pref: 4
                                })}
                                className={`rounded border shadow-md flex items-center space-x-2 p-2 text-base ${cartState.quantity_pref === 4 ? 'text-cyan-50 border-cyan-600 bg-cyan-800 font-medium' : 'text-neutral-600 border-neutral-50 bg-white'}`}
                              >
                                <span className="flex-1 text-left">4+ cups</span>
                              </button>
                            </div>
                          </div>
                          <div>
                            <h3 className="font-accent text-xl text-cyan-700">2. What type of grounds do you like?</h3>
                            <div className="grid grid-cols-2 gap-4 mt-4">
                              <button
                                onClick={() => {
                                  if (cartState.ground_pref.includes("Fresh Ground")) {
                                    const newGroundPref = [...cartState.ground_pref];
                                    newGroundPref.splice(cartState.ground_pref.indexOf("Fresh Ground"), 1)
                                    setCartState({
                                      ...cartState,
                                      ground_pref: newGroundPref
                                    })
                                  } else {
                                    setCartState({
                                      ...cartState,
                                      ground_pref: [...cartState.ground_pref, "Fresh Ground"]
                                    })
                                  }
                                }}
                                className={`rounded border shadow-md flex items-center space-x-2 p-2 text-base bg-white ${cartState.ground_pref.includes("Fresh Ground") ? 'border-cyan-600 text-cyan-700 font-medium' : 'border-neutral-50 text-neutral-600'}`}
                              >
                                <span className="flex-1 text-left">Fresh ground</span>
                                {
                                  cartState.ground_pref.includes("Fresh Ground") ? <svg
                                    xmlns="http://www.w3.org/2000/svg"
                                    fill="none"
                                    viewBox="0 0 24 24"
                                    strokeWidth="1.5"
                                    stroke="currentColor"
                                    className="w-6 h-6 text-cyan-600"
                                  >
                                    <path strokeLinecap="round" strokeLinejoin="round" d="M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                  </svg> : null
                                }
                              </button>
                              <button
                                onClick={() => {
                                  if (cartState.ground_pref.includes("Whole Bean")) {
                                    const newGroundPref = [...cartState.ground_pref];
                                    newGroundPref.splice(cartState.ground_pref.indexOf("Whole Bean"), 1)
                                    setCartState({
                                      ...cartState,
                                      ground_pref: newGroundPref
                                    })
                                  } else {
                                    setCartState({
                                      ...cartState,
                                      ground_pref: [...cartState.ground_pref, "Whole Bean"]
                                    })
                                  }
                                }}
                                className={`rounded border shadow-md flex items-center space-x-2 p-2 text-base bg-white ${cartState.ground_pref.includes("Whole Bean") ? 'border-cyan-600 text-cyan-700 font-medium' : 'border-neutral-50 text-neutral-600'}`}
                              >
                                <span className="flex-1 text-left">Whole bean</span>
                                {
                                  cartState.ground_pref.includes("Whole Bean") ? <svg
                                    xmlns="http://www.w3.org/2000/svg"
                                    fill="none"
                                    viewBox="0 0 24 24"
                                    strokeWidth="1.5"
                                    stroke="currentColor"
                                    className="w-6 h-6 text-cyan-600"
                                  >
                                    <path strokeLinecap="round" strokeLinejoin="round" d="M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                  </svg> : null
                                }
                              </button>
                            </div>
                          </div>
                          <div>
                            <h3 className="font-accent text-xl text-cyan-700">3. Do you like flavored coffee?</h3>
                            <div className="grid grid-cols-2 gap-4 mt-4">
                              <button
                                onClick={() => setCartState({
                                  ...cartState,
                                  flavor_pref: "yes"
                                })}
                                className={`rounded border shadow-md flex items-center space-x-2 p-2 text-base ${cartState.flavor_pref === "yes" ? 'text-cyan-50 border-cyan-600 bg-cyan-800 font-medium' : 'text-neutral-600 border-neutral-50 bg-white'}`}
                              >
                                <span className="flex-1 text-left">Yes</span>
                              </button>
                              <button
                                onClick={() => setCartState({
                                  ...cartState,
                                  flavor_pref: "no"
                                })}
                                className={`rounded border shadow-md flex items-center space-x-2 p-2 text-base ${cartState.flavor_pref === "no" ? 'text-cyan-50 border-cyan-600 bg-cyan-800 font-medium' : 'text-neutral-600 border-neutral-50 bg-white'}`}
                              >
                                <span className="flex-1 text-left">No</span>
                              </button>
                            </div>
                          </div>
                          <div>
                            <h3 className="font-accent text-xl text-cyan-700">4. What are your favorite roasts?</h3>
                            <div className="grid grid-cols-2 gap-4 mt-4">
                              <button
                                onClick={() => {
                                  if (cartState.roast_pref.includes("Dark Roast")) {
                                    const newRoastPref = [...cartState.roast_pref];
                                    newRoastPref.splice(cartState.roast_pref.indexOf("Dark Roast"), 1)
                                    setCartState({
                                      ...cartState,
                                      roast_pref: newRoastPref
                                    })
                                  } else {
                                    setCartState({
                                      ...cartState,
                                      roast_pref: [...cartState.roast_pref, "Dark Roast"]
                                    })
                                  }
                                }}
                                className={`rounded border shadow-md flex items-center space-x-2 p-2 text-base bg-white ${cartState.roast_pref.includes("Dark Roast") ? 'border-cyan-600 text-cyan-700 font-medium' : 'border-neutral-50 text-neutral-600'}`}
                              >
                                <span className="flex-1 text-left">Dark roast</span>
                                {
                                  cartState.roast_pref.includes("Dark Roast") ? <svg
                                    xmlns="http://www.w3.org/2000/svg"
                                    fill="none"
                                    viewBox="0 0 24 24"
                                    strokeWidth="1.5"
                                    stroke="currentColor"
                                    className="w-6 h-6 text-cyan-600"
                                  >
                                    <path strokeLinecap="round" strokeLinejoin="round" d="M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                  </svg> : null
                                }
                              </button>
                              <button
                                onClick={() => {
                                  if (cartState.roast_pref.includes("Medium Roast")) {
                                    const newRoastPref = [...cartState.roast_pref];
                                    newRoastPref.splice(cartState.roast_pref.indexOf("Medium Roast"), 1)
                                    setCartState({
                                      ...cartState,
                                      roast_pref: newRoastPref
                                    })
                                  } else {
                                    setCartState({
                                      ...cartState,
                                      roast_pref: [...cartState.roast_pref, "Medium Roast"]
                                    })
                                  }
                                }}
                                className={`rounded border shadow-md flex items-center space-x-2 p-2 text-base bg-white ${cartState.roast_pref.includes("Medium Roast") ? 'border-cyan-600 text-cyan-700 font-medium' : 'border-neutral-50 text-neutral-600'}`}
                              >
                                <span className="flex-1 text-left">Medium roast</span>
                                {
                                  cartState.roast_pref.includes("Medium Roast") ? <svg
                                    xmlns="http://www.w3.org/2000/svg"
                                    fill="none"
                                    viewBox="0 0 24 24"
                                    strokeWidth="1.5"
                                    stroke="currentColor"
                                    className="w-6 h-6 text-cyan-600"
                                  >
                                    <path strokeLinecap="round" strokeLinejoin="round" d="M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                  </svg> : null
                                }
                              </button>
                              <button
                                onClick={() => {
                                  if (cartState.roast_pref.includes("Light Roast")) {
                                    const newRoastPref = [...cartState.roast_pref];
                                    newRoastPref.splice(cartState.roast_pref.indexOf("Light Roast"), 1)
                                    setCartState({
                                      ...cartState,
                                      roast_pref: newRoastPref
                                    })
                                  } else {
                                    setCartState({
                                      ...cartState,
                                      roast_pref: [...cartState.roast_pref, "Light Roast"]
                                    })
                                  }
                                }}
                                className={`rounded border shadow-md flex items-center space-x-2 p-2 text-base bg-white ${cartState.roast_pref.includes("Light Roast") ? 'border-cyan-600 text-cyan-700 font-medium' : 'border-neutral-50 text-neutral-600'}`}
                              >
                                <span className="flex-1 text-left">Light roast</span>
                                {
                                  cartState.roast_pref.includes("Light Roast") ? <svg
                                    xmlns="http://www.w3.org/2000/svg"
                                    fill="none"
                                    viewBox="0 0 24 24"
                                    strokeWidth="1.5"
                                    stroke="currentColor"
                                    className="w-6 h-6 text-cyan-600"
                                  >
                                    <path strokeLinecap="round" strokeLinejoin="round" d="M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                  </svg> : null
                                }
                              </button>
                            </div>
                          </div>
                        </div>
                        <div className="grid grid-cols-2 gap-6 p-4 border-t border-cyan-100">
                          <button onClick={() => setCartState({
                            ...cartState,
                            displayComponent: 'cart'
                          })} className="rounded text-base bg-cyan-50 text-center py-4 text-cyan-600 font-accent">
                            Skip
                          </button>
                          <button onClick={() => setCartState({
                            ...cartState,
                            displayComponent: 'cart'
                          })} className="v2-subscription-submit-quiz rounded text-base text-cyan-50 text-center py-4 bg-cyan-800 font-accent">
                            Submit
                          </button>
                        </div>
                      </div>
                      <div
                        className={`transition-opacity absolute inset-0 ${cartState.displayComponent === 'cart' ? 'z-10 opacity-100' : 'opacity-0'}`}
                      >
                        <div className="p-4 flex flex-col space-y-8 h-[calc(100vh-89px-140px)] lg:h-[calc(100vh-89px-120px)] overflow-y-auto">
                          {% comment %} tier information {% endcomment %}
                          {
                            plan ? <div className="flex flex-col space-y-2">
                              {% comment %} progress bar & tier name {% endcomment %}
                              <div className="flex items-center justify-between">
                                <div className="flex w-2/3 rounded-full bg-cyan-50 h-3">
                                  <div
                                    className={`bg-cyan-500 rounded-full h-full transition-all delay-200 ${plan.type === "base" ? "w-1/3" : plan.type === "pro" ? "w-2/3" : "w-full"}`}
                                  ></div>
                                </div>
                                <div className="flex items-center space-x-1.5">
                                  <h4 className="text-cyan-800 text-xl font-accent">{plan.display_name}</h4>
                                  <button onClick={() => window.location.href = '/pages/coffee-club'}>
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none">
                                      <path d="M8.66667 10.6667H8V8H7.33333M8 5.33333H8.00667M14 8C14 11.3137 11.3137 14 8 14C4.68629 14 2 11.3137 2 8C2 4.68629 4.68629 2 8 2C11.3137 2 14 4.68629 14 8Z" stroke="#86D7E1" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                                    </svg>
                                  </button>
                                </div>
                              </div>
                              {% comment %} tier benefits {% endcomment %}
                              <div className="grid grid-cols-2 gap-y-1">
                                {
                                  plan.perk_list.map(p => <div key={p} className="flex items-center space-x-2">
                                    <svg
                                      xmlns="http://www.w3.org/2000/svg"
                                      viewBox="0 0 24 24"
                                      fill="currentColor"
                                      className="w-6 h-6 text-cyan-400"
                                    >
                                      <path fillRule="evenodd" d="M19.916 4.626a.75.75 0 01.208 1.04l-9 13.5a.75.75 0 01-1.154.114l-6-6a.75.75 0 011.06-1.06l5.353 5.353 8.493-12.739a.75.75 0 011.04-.208z" clipRule="evenodd" />
                                    </svg>
                                    <span className="text-cyan-800 text-base">{p}</span>
                                  </div>)
                                }
                              </div>
                            </div> : null
                          }
              
                          {% comment %} your subscription {% endcomment %}
                          {
                            plan ? <div className="flex flex-col space-y-4">
                              <h4 className="text-2xl text-cyan-800 font-accent">
                                Your subscription
                                <div className="text-sm flex space-x-1 font-base">
                                  <span className="line-through text-neutral-500">${total_no_discount}</span><span className="text-cyan-700 font-medium">${total_with_discount}</span>
                                </div>
                              </h4>
                              {% comment %} item grid {% endcomment %}
                              <div className="grid grid-cols-3 gap-3 pb-8">
                                {
                                  cartState.items.map((item, i) => <div
                                    key={i}
                                    className="v2-subscription-item-container flex flex-col space-y-2 group relative"
                                  >
                                    <button
                                      onClick={() => {
                                        const items = [...cartState.items]
                                        items.splice(i, 1)
                                        setCartState({
                                          ...cartState,
                                          items
                                        })
                                      }}
                                      className="absolute top-2 right-4 shadow-md z-10 rounded-full h-8 w-8 bg-neutral-50 flex md:hidden md:group-hover:flex items-center justify-center"
                                    >
                                      <svg
                                        xmlns="http://www.w3.org/2000/svg"
                                        fill="none"
                                        viewBox="0 0 24 24"
                                        strokeWidth="1.5"
                                        stroke="currentColor"
                                        className="w-6 h-6"
                                      >
                                        <path strokeLinecap="round" strokeLinejoin="round" d="M19.5 12h-15" />
                                      </svg>
                                    </button>
                                    <img
                                      src={item.product.featured_image}
                                      loading="lazy"
                                      className="w-full h-32 object-contain"
                                    />
                                    <h6 className="font-base text-xs text-cyan-800 text-center">
                                      {item.variant.option1}, {item.variant.option2}
                                    </h6>
                                    <h5 className="font-base text-sm text-cyan-800 font-[700] text-center leading-[16px] tracking-tight">
                                      <a href={item.product.url}>{item.product.title}</a>
                                    </h5>
                                  </div>)
                                }
                              </div>
                            </div> : null
                          }
              
                          {% comment %} buyup {% endcomment %}
                          <div className="flex flex-col space-y-4 md:space-y-6">
                            <div>
                              {
                                plan ? 
                                <h4 className="text-2xl text-cyan-800 font-accent">Want more?</h4> : <h4 className="text-2xl text-cyan-800 font-accent">
                                  Here's some suggestions to get started
                                </h4>
                              }
                              {
                                next_perks ? <div><h6 className="text-cyan-800 my-0 text-base">
                                  Add <span className="font-bold">{next_tier_number}</span> more bag{next_tier_number > 1 ? 's' : ''} and get:
                                </h6><div className="mt-2 grid grid-cols-2 gap-y-1">
                                  {
                                    next_perks.map(p => <div key={p} className="flex items-center space-x-2">
                                      <svg
                                        xmlns="http://www.w3.org/2000/svg"
                                        viewBox="0 0 24 24"
                                        fill="currentColor"
                                        className="w-6 h-6 text-cyan-400"
                                      >
                                        <path fillRule="evenodd" d="M12 3.75a.75.75 0 01.75.75v6.75h6.75a.75.75 0 010 1.5h-6.75v6.75a.75.75 0 01-1.5 0v-6.75H4.5a.75.75 0 010-1.5h6.75V4.5a.75.75 0 01.75-.75z" clipRule="evenodd" />
                                      </svg>
                                      <span className="text-cyan-800 text-base">{p}</span>
                                    </div>)
                                  }
                                </div></div> : null
                              }
                            </div>
              
                            {% comment %} recommended products {% endcomment %}
                            <div className="grid grid-cols-3 gap-3 pb-8">
                              {
                                cartState.recommendations.map((item, i) => <div key={i}
                                  className="flex flex-col space-y-2 group relative"
                                >
                                  <button
                                    onClick={() => setCartState({
                                      ...cartState,
                                      items: [...cartState.items, item]
                                    })}
                                    className="absolute top-2 right-4 shadow-md z-10 rounded-full h-8 w-8 bg-neutral-50 flex md:hidden md:group-hover:flex items-center justify-center"
                                  >
                                    <svg
                                      xmlns="http://www.w3.org/2000/svg"
                                      fill="none"
                                      viewBox="0 0 24 24"
                                      strokeWidth="1.5"
                                      stroke="currentColor"
                                      className="w-6 h-6"
                                    >
                                      <path strokeLinecap="round" strokeLinejoin="round" d="M12 4.5v15m7.5-7.5h-15" />
                                    </svg>
                                  </button>
                                  <img
                                    src={item.product.featured_image}
                                    loading="lazy"
                                    className="w-full h-32 object-contain"
                                  />
                                  <h6 className="font-base text-xs text-cyan-800 text-center">{item.variant_title}</h6>
                                  <h5 className="font-base text-sm text-cyan-800 font-[700] text-center leading-[16px] tracking-tight">
                                    <a href={item.product.url}>{item.product.title}</a>
                                  </h5>
                                </div>)
                              }
                            </div>
                          </div>
                        </div>
              
                        {% comment %} shop & checkout {% endcomment %}
                        <div className="grid grid-cols-2 gap-6 p-4 border-t border-cyan-100">
                          <button onClick={() => setCartState({
                            ...cartState,
                            isOpen: false
                          })} className="rounded text-base bg-cyan-50 text-center py-4 text-cyan-600 font-accent">
                            Back to shop
                          </button>
                          <button onClick={checkout} className="rounded text-base text-cyan-50 text-center py-4 bg-cyan-800 font-accent">Checkout</button>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </React.Fragment>
    );
  }

  ReactDOM.render(<LRCSubscriptionCart />, document.getElementById('lrc-subscription-cart'));
</script>
